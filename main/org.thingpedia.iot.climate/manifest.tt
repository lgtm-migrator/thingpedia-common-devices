abstract class @org.thingpedia.iot.climate
#_[thingpedia_name="Climate"]
#_[thingpedia_description="Interface for hvac and Thermostat."]
#_[description="Interface for hvac and Thermostat."]
#[license="BSD-3-Clause"]
#[license_gplcompatible=true]
#[subcategory="home"]
{
  monitorable query hvac_action(out action: Enum(heating,cooling,off,drying,idle)
                            #_[canonical={
                                base=["current action"]
                            }]
  )
  #_[canonical="hvac"]
  #_[confirmation="what is doing your hvac system"]
  #[confirm=false]
  #_[result=["the {${__device}|} hvac system is ${action}"]];

  monitorable query hvac_modes_aval(out modes : Enum(off,heat,cool,heat_cool,auto,dry,fan_only)
                            #_[canonical={
                                base=["available modes"],
                                property = ["available mode #"]
                            }]
  )
  #_[canonical="hvac"]
  #_[confirmation="the modes available for your hvac system"]
  #[confirm=false]
  #_[result=["the available modes {on ${__device}|} are ${modes}"]];

  action set_hvac_mode(in req mode: Enum(heat,cool,heat_cool,off,auto,dry,fan_only) 
                            #_[prompt="Which mode do you want to set?"] 
                            #_[canonical={
                                base=["mode"]
                            }]
  )
  #_[canonical="set hvac"]
  #_[confirmation="set your hvac to $mode"]
  #[confirm=true];

  monitorable query hvac_preset(out preset: Enum(eco,away,boost,comfort,home,sleep,activity)
                            #_[canonical={
                                base=["current preset"]
                            }]
  )
  #_[canonical="hvac"]
  #_[confirmation="the preset of your hvac system"]
  #[confirm=false]
  #_[result=["the {${__device}|} hvac system is set to ${preset}"]];

  monitorable query hvac_presets_aval(out presets : Enum(eco,away,boost,comfort,home,sleep,activity)
                            #_[canonical={
                                base=["available presets"],
                                property = ["available preset #"]
                            }]
  )
  #_[canonical="hvac"]
  #_[confirmation="the presets available for your hvac system"]
  #[confirm=false]
  #_[result=["the available presets {on ${__device}|} are ${presets}"]];

  action set_hvac_preset(in req preset: Enum(eco,away,boost,comfort,home,sleep,activity) 
                            #_[prompt="What preset do you want to set?"] 
                            #_[canonical={
                                base=["preset"]
                            }]
  )
  #_[canonical="set hvac"]
  #_[confirmation="set your hvac to $preset"]
  #[confirm=true];

  monitorable query current_temperature(out value : Measure(C)
                            #_[canonical={
                                base = ["current temperature"],
                                verb = ["reading"]
                            }]
  )
  #_[canonical="thermostat"]
  #_[confirmation="the temperature from your thermostat"]
  #[confirm=false]
  #_[result=["the temperature {reported by ${__device}|} is ${value}"]];

  monitorable query target_temperature(out value : Measure(C)
                            #_[canonical={
                                base = ["target temperature"],
                                verb = ["is set to"]
                            }]
  )
  #_[canonical="thermostat"]
  #_[confirmation="the target temperature set on your thermostat"]
  #[confirm=false]
  #_[result=["the target temperature {on ${__device}|} is set to ${value}"]];

  action set_target_temperature(in req value: Measure(C)
                            #_[canonical={
                                base=["target temperature"],
                                preposition = ["to # degree"]
                            }]
  )
  #_[canonical="set thermostat"]
  #_[confirmation="set your thermostat to $value"]
  #[confirm=true];

  action set_minmax_temperature(in req low: Measure(C) 
                                #_[prompt="What low temperature do you want to set?"]
                                #_[canonical={
                                    base = ["minimum temperature", "minimal temperature limit"]
                                }]
                                #[min_number=15C]
                                #[max_number=30C],
                                in req high: Measure(C) 
                                #_[prompt="What high temperature do you want to set?"]
                                #_[canonical={
                                    base = ["maximum temperature", "maximal temperature limit"]
                                }]
                                #[min_number=15C]
                                #[max_number=30C])
  #_[canonical="set thermostat"]
  #_[confirmation="set your thermostat between $low and $high"]
  #[confirm=true];

  monitorable query min_temperature(out low : Measure(C)
                            #_[canonical={
                                base = ["minimum temperature set"]
                            }]
  )
  #_[canonical="thermostat"]
  #_[confirmation="the minimum range limit of temperatures set on your thermostat"]
  #[confirm=false]
  #_[result=["the minimum temperature {on ${__device}|} is set to ${low}"]];

  monitorable query max_temperature(out high : Measure(C)
                            #_[canonical={
                                base = ["maximum temperature set"]
                            }]
  )
  #_[canonical="thermostat"]
  #_[confirmation="the maximum range limit of temperatures set on your thermostat"]
  #[confirm=false]
  #_[result=["the maximum temperature {on ${__device}|} is set to  ${high} "]];

  monitorable query current_humidity(out value : Number
                            #_[canonical={
                                base = ["current humidity"],
                                verb = ["reading"]
                            }]
  )
  #_[canonical="thermostat"]
  #_[confirmation="the current humidity reading from your thermostat"]
  #[confirm=false]
  #_[result=["the humidity {reported by ${__device}|} is ${value}"]];

  monitorable query target_humidity(out value : Number
                            #_[canonical={
                                base = ["target humidity"],
                                verb = ["is set to"]
                            }]
  )
  #_[canonical="thermostat"]
  #_[confirmation="the target humidity set on your thermostat"]
  #[confirm=false]
  #_[result=["the target humidity {on ${__device}|} is set to ${value}"]];

  action set_target_humidity(in req value: Number
                             #[min_number=0]
                             #[max_number=100]
                             #_[canonical={
                                base = ["target humidity"]
                             }]
  )
  #_[canonical="set thermostat"]
  #_[confirmation="set your thermostat to $value"]
  #[confirm=true];

  monitorable query min_humidity(out low : Number
                            #_[canonical={
                                base = ["minimum humidity set"]
                            }]
  )
  #_[canonical="thermostat"]
  #_[confirmation="the minimum range limit of humidity set on your thermostat"]
  #[confirm=false]
  #_[result=["the minimum humidity {on ${__device}|} is set to ${low}"]];

  monitorable query max_humidity(out high : Number
                            #_[canonical={
                                base = ["maximum humidity set"]
                            }]
  )
  #_[canonical="thermostat"]
  #_[confirmation="the maximum range limit of humidity set on your thermostat"]
  #[confirm=false]
  #_[result=["the maximum humidity {on ${__device}|} is set to  ${high} "]];

  monitorable query fan_mode(out mode: Enum(on,off,auto,low,medium,high,middle,focus,diffuse)
                            #_[canonical={
                                base=["current fan mode"]
                            }]
  )
  #_[canonical="hvac"]
  #_[confirmation="how is set your fan mode"]
  #[confirm=false]
  #_[result=["the fan mode {on ${__device}|} is set to ${mode}"]];

  monitorable query fan_modes_aval(out modes : Enum(on,off,auto,low,medium,high,middle,focus,diffuse)
                            #_[canonical={
                                base=["available fan modes"],
                                property = ["available fan mode #"]
                            }]
  )
  #_[canonical="hvac"]
  #_[confirmation="the fan modes available for your system"]
  #[confirm=false]
  #_[result=["the available fan modes {on ${__device}|} are ${modes}"]];

  action set_fan_mode(in req mode: Enum(on,off,auto,low,medium,high,middle,focus,diffuse))
  #_[canonical="set fan mode"]
  #_[confirmation="set your fan mode to $mode"]
  #[confirm=true];

  monitorable query swing_mode(out mode: Enum(off,vertical,horizontal,both)
                            #_[canonical={
                                base=["current swing mode"]
                            }]
  )
  #_[canonical="hvac"]
  #_[confirmation="how is set your swing mode"]
  #[confirm=false]
  #_[result=["the swing mode {on ${__device}|} is set to ${mode}"]];

  monitorable query swing_modes_aval(out modes : Enum(off,vertical,horizontal,both)
                            #_[canonical={
                                base=["available swing modes"],
                                property = ["available swing mode #"]
                            }]
  )
  #_[canonical="hvac"]
  #_[confirmation="the swing modes available for your system"]
  #[confirm=false]
  #_[result=["the available swing modes {on ${__device}|} are ${modes}"]];

  action set_swing_mode(in req mode: Enum(off,vertical,horizontal,both)
                            #_[canonical={
                                base = ["swing mode"]
                            }]
  )
  #_[canonical="set hvac"]
  #_[confirmation="set your swing mode to $mode"]
  #[confirm=true];

  action set_aux_heat(in req value: Enum(on,off)
                            #_[canonical={
                                base = ["auxiliary heater"]
                            }]
  )
  #_[canonical="set hvac"]
  #_[confirmation="set your auxiliary heater to $value"]
  #[confirm=true];

  action set_hvac_onoff(in req value: Enum(on,off)
                            #_[canonical={
                                base = ["power"]
                            }]
  )
  #_[canonical="set hvac"]
  #_[confirmation="set your hvac power to $value"]
  #[confirm=true];
}
