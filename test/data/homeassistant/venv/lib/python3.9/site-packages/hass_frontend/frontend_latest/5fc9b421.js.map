{"version":3,"file":"5fc9b421.js","mappings":";AAaA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;ACTA;;;;;;;;;;;;;;;;;;;;AANA;AC+DA;;;AAGA;;;;AAMA;;AAEA;;;;;AAKA;;;;;;AAQA;;AAIA;AACA;AACA;;;;AAIA;AAEA;AACA;;;;;AAMA;;AAGA;;AAIA;AAEA;;;AAtFA;;;AAkGA;;AAEA;AACA;AACA;;;;;AAKA;;AAIA;AACA;AACA;;;;AAIA;AACA;;AAIA;;AAGA;;AAIA;;AAGA;;;AAGA;;AAEA;;AAIA;;AAGA;;;;;AAKA;;AArJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;ACwBA;;;AAGA;;;;AAMA;;AAEA;;;;;AAKA;;;;;;AAQA;;AAIA;AACA;AACA;;;;AAIA;AAEA;AACA;;;;;AAMA;;AAGA;;AAIA;AAEA;;;AAIA;;AAIA;AACA;AACA;;;;;AAOA;;;AAGA;;AAEA;;AAIA;;AAGA;;;;;AAKA;;AAGA;;;AAxHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;ACkCA;;;;AAIA;;AAEA;;;;;AAKA;;;;;;AAMA;;AAIA;AACA;AACA;;;;AAIA;AAEA;AACA;;;;;AAMA;;AAGA;;AAIA;;;AAtEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;ACYA;;;;;AAKA;;AAEA;;;;;;;;;;;AAWA;AACA;AACA;;;;AAIA;AAEA;AACA;;;;;AAQA;;;;AAKA;;;AAIA;AACA;;;AAGA;;AAIA;AACA;;;AAGA;;;;AAhFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACqDA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAnEA;ACqDA;;;AAGA;;;;AAMA;;AAEA;;;;;AAKA;;;;;;AAQA;;AAIA;AACA;AACA;;;;AAIA;AAGA;;;;AAKA;;AAGA;;AAIA;;;AAIA;AACA;AACA;AACA;;;;AAIA;;AAGA;;AAIA;;;AAIA;AACA;AACA;;AAIA;;AAGA;;AAIA;;AAGA;AACA;AACA;;AAIA;;AAGA;;AAIA;;;;AA1IA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AC6BA;AACA;;;AAMA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AAEA;;AAGA;AACA;AACA;;AAEA;AAEA;;AAGA;AACA;AACA;;AAEA;;AAhDA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-cluster-attributes.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-cluster-commands.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-clusters.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-device-binding.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-clusters-data-table.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-group-binding.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/dialog-zha-cluster.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 8px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 20px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 20px 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 20px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(\n          --ha-dialog-border-radius,\n          var(--ha-card-border-radius, 4px)\n        );\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 40px;\n        margin-inline-end: 40px;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiHelpCircle } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { stopPropagation } from \"../../../../../common/dom/stop_propagation\";\nimport \"../../../../../components/buttons/ha-call-service-button\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-icon-button\";\nimport \"../../../../../components/ha-select\";\nimport \"../../../../../components/ha-service-description\";\nimport {\n  Attribute,\n  Cluster,\n  fetchAttributesForCluster,\n  ReadAttributeServiceData,\n  readAttributeValue,\n  ZHADevice,\n} from \"../../../../../data/zha\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport \"../../../ha-config-section\";\nimport { formatAsPaddedHex } from \"./functions\";\nimport {\n  ChangeEvent,\n  ItemSelectedEvent,\n  SetAttributeServiceData,\n} from \"./types\";\n\nexport class ZHAClusterAttributes extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public isWide?: boolean;\n\n  @property() public showHelp = false;\n\n  @property() public selectedNode?: ZHADevice;\n\n  @property() public selectedCluster?: Cluster;\n\n  @state() private _attributes: Attribute[] = [];\n\n  @state() private _selectedAttributeId?: number;\n\n  @state() private _attributeValue?: any = \"\";\n\n  @state() private _manufacturerCodeOverride?: string | number;\n\n  @state()\n  private _setAttributeServiceData?: SetAttributeServiceData;\n\n  protected updated(changedProperties: PropertyValues): void {\n    if (changedProperties.has(\"selectedCluster\")) {\n      this._attributes = [];\n      this._selectedAttributeId = undefined;\n      this._attributeValue = \"\";\n      this._fetchAttributesForCluster();\n    }\n    super.update(changedProperties);\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-config-section .isWide=${this.isWide}>\n        <div class=\"header\" slot=\"header\">\n          <span>\n            ${this.hass!.localize(\n              \"ui.panel.config.zha.cluster_attributes.header\"\n            )}\n          </span>\n          <ha-icon-button\n            class=\"toggle-help-icon\"\n            @click=${this._onHelpTap}\n            .path=${mdiHelpCircle}\n            .label=${this.hass!.localize(\"ui.common.help\")}\n          >\n          </ha-icon-button>\n        </div>\n        <span slot=\"introduction\">\n          ${this.hass!.localize(\n            \"ui.panel.config.zha.cluster_attributes.introduction\"\n          )}\n        </span>\n\n        <ha-card class=\"content\">\n          <div class=\"attribute-picker\">\n            <ha-select\n              .label=${this.hass!.localize(\n                \"ui.panel.config.zha.cluster_attributes.attributes_of_cluster\"\n              )}\n              class=\"menu\"\n              .value=${String(this._selectedAttributeId)}\n              @selected=${this._selectedAttributeChanged}\n              @closed=${stopPropagation}\n              fixedMenuPosition\n              naturalMenuWidth\n            >\n              ${this._attributes.map(\n                (entry) => html`\n                  <mwc-list-item .value=${String(entry.id)}>\n                    ${entry.name + \" (id: \" + formatAsPaddedHex(entry.id) + \")\"}\n                  </mwc-list-item>\n                `\n              )}\n            </ha-select>\n          </div>\n          ${this.showHelp\n            ? html`\n                <div class=\"help-text\">\n                  ${this.hass!.localize(\n                    \"ui.panel.config.zha.cluster_attributes.help_attribute_dropdown\"\n                  )}\n                </div>\n              `\n            : \"\"}\n          ${this._selectedAttributeId !== undefined\n            ? this._renderAttributeInteractions()\n            : \"\"}\n        </ha-card>\n      </ha-config-section>\n    `;\n  }\n\n  private _renderAttributeInteractions(): TemplateResult {\n    return html`\n      <div class=\"input-text\">\n        <paper-input\n          label=${this.hass!.localize(\"ui.panel.config.zha.common.value\")}\n          type=\"string\"\n          .value=${this._attributeValue}\n          @value-changed=${this._onAttributeValueChanged}\n          placeholder=${this.hass!.localize(\"ui.panel.config.zha.common.value\")}\n        ></paper-input>\n      </div>\n      <div class=\"input-text\">\n        <paper-input\n          label=${this.hass!.localize(\n            \"ui.panel.config.zha.common.manufacturer_code_override\"\n          )}\n          type=\"number\"\n          .value=${this._manufacturerCodeOverride}\n          @value-changed=${this._onManufacturerCodeOverrideChanged}\n          placeholder=${this.hass!.localize(\"ui.panel.config.zha.common.value\")}\n        ></paper-input>\n      </div>\n      <div class=\"card-actions\">\n        <mwc-button @click=${this._onGetZigbeeAttributeClick}>\n          ${this.hass!.localize(\n            \"ui.panel.config.zha.cluster_attributes.get_zigbee_attribute\"\n          )}\n        </mwc-button>\n        ${this.showHelp\n          ? html`\n              <div class=\"help-text2\">\n                ${this.hass!.localize(\n                  \"ui.panel.config.zha.cluster_attributes.help_get_zigbee_attribute\"\n                )}\n              </div>\n            `\n          : \"\"}\n        <ha-call-service-button\n          .hass=${this.hass}\n          domain=\"zha\"\n          service=\"set_zigbee_cluster_attribute\"\n          .serviceData=${this._setAttributeServiceData}\n        >\n          ${this.hass!.localize(\n            \"ui.panel.config.zha.cluster_attributes.set_zigbee_attribute\"\n          )}\n        </ha-call-service-button>\n        ${this.showHelp\n          ? html`\n              <ha-service-description\n                .hass=${this.hass}\n                domain=\"zha\"\n                service=\"set_zigbee_cluster_attribute\"\n                class=\"help-text2\"\n              ></ha-service-description>\n            `\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private async _fetchAttributesForCluster(): Promise<void> {\n    if (this.selectedNode && this.selectedCluster && this.hass) {\n      this._attributes = await fetchAttributesForCluster(\n        this.hass,\n        this.selectedNode!.ieee,\n        this.selectedCluster!.endpoint_id,\n        this.selectedCluster!.id,\n        this.selectedCluster!.type\n      );\n      this._attributes.sort((a, b) => a.name.localeCompare(b.name));\n    }\n  }\n\n  private _computeReadAttributeServiceData():\n    | ReadAttributeServiceData\n    | undefined {\n    if (!this.selectedCluster || !this.selectedNode) {\n      return undefined;\n    }\n    return {\n      ieee: this.selectedNode!.ieee,\n      endpoint_id: this.selectedCluster!.endpoint_id,\n      cluster_id: this.selectedCluster!.id,\n      cluster_type: this.selectedCluster!.type,\n      attribute: this._selectedAttributeId!,\n      manufacturer: this._manufacturerCodeOverride\n        ? parseInt(this._manufacturerCodeOverride as string, 10)\n        : undefined,\n    };\n  }\n\n  private _computeSetAttributeServiceData():\n    | SetAttributeServiceData\n    | undefined {\n    if (!this.selectedCluster || !this.selectedNode) {\n      return undefined;\n    }\n    return {\n      ieee: this.selectedNode!.ieee,\n      endpoint_id: this.selectedCluster!.endpoint_id,\n      cluster_id: this.selectedCluster!.id,\n      cluster_type: this.selectedCluster!.type,\n      attribute: this._selectedAttributeId!,\n      value: this._attributeValue,\n      manufacturer: this._manufacturerCodeOverride\n        ? parseInt(this._manufacturerCodeOverride as string, 10)\n        : undefined,\n    };\n  }\n\n  private _onAttributeValueChanged(value: ChangeEvent): void {\n    this._attributeValue = value.detail!.value;\n    this._setAttributeServiceData = this._computeSetAttributeServiceData();\n  }\n\n  private _onManufacturerCodeOverrideChanged(value: ChangeEvent): void {\n    this._manufacturerCodeOverride = value.detail!.value;\n    this._setAttributeServiceData = this._computeSetAttributeServiceData();\n  }\n\n  private async _onGetZigbeeAttributeClick(): Promise<void> {\n    const data = this._computeReadAttributeServiceData();\n    if (data && this.hass) {\n      this._attributeValue = await readAttributeValue(this.hass, data);\n    }\n  }\n\n  private _onHelpTap(): void {\n    this.showHelp = !this.showHelp;\n  }\n\n  private _selectedAttributeChanged(event: ItemSelectedEvent): void {\n    this._selectedAttributeId = Number(event.target!.value);\n    this._attributeValue = \"\";\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-select {\n          margin-top: 16px;\n        }\n\n        .menu {\n          width: 100%;\n        }\n\n        .content {\n          margin-top: 24px;\n        }\n\n        ha-card {\n          max-width: 680px;\n        }\n\n        .card-actions.warning ha-call-service-button {\n          color: var(--error-color);\n        }\n\n        .attribute-picker {\n          align-items: center;\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 10px;\n        }\n\n        .input-text {\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 10px;\n        }\n\n        .header {\n          flex-grow: 1;\n        }\n\n        .toggle-help-icon {\n          float: right;\n          top: -6px;\n          right: 0;\n          padding-right: 0px;\n          color: var(--primary-color);\n        }\n\n        ha-service-description {\n          display: block;\n          color: grey;\n        }\n\n        [hidden] {\n          display: none;\n        }\n        .help-text {\n          color: grey;\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 16px;\n        }\n        .help-text2 {\n          color: grey;\n          padding: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-cluster-attributes\": ZHAClusterAttributes;\n  }\n}\n\ncustomElements.define(\"zha-cluster-attributes\", ZHAClusterAttributes);\n","import \"@material/mwc-list/mwc-list-item\";\nimport { mdiHelpCircle } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { stopPropagation } from \"../../../../../common/dom/stop_propagation\";\nimport \"../../../../../components/buttons/ha-call-service-button\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-icon-button\";\nimport \"../../../../../components/ha-select\";\nimport \"../../../../../components/ha-service-description\";\nimport {\n  Cluster,\n  Command,\n  fetchCommandsForCluster,\n  ZHADevice,\n} from \"../../../../../data/zha\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport \"../../../ha-config-section\";\nimport { formatAsPaddedHex } from \"./functions\";\nimport { ChangeEvent, IssueCommandServiceData } from \"./types\";\n\nexport class ZHAClusterCommands extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public isWide?: boolean;\n\n  @property() public selectedNode?: ZHADevice;\n\n  @property() public selectedCluster?: Cluster;\n\n  @state() private _showHelp = false;\n\n  @state() private _commands: Command[] = [];\n\n  @state() private _selectedCommandId?: number;\n\n  @state() private _manufacturerCodeOverride?: number;\n\n  @state()\n  private _issueClusterCommandServiceData?: IssueCommandServiceData;\n\n  protected updated(changedProperties: PropertyValues): void {\n    if (changedProperties.has(\"selectedCluster\")) {\n      this._commands = [];\n      this._selectedCommandId = undefined;\n      this._fetchCommandsForCluster();\n    }\n    super.update(changedProperties);\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-config-section .isWide=${this.isWide}>\n        <div class=\"header\" slot=\"header\">\n          <span>\n            ${this.hass!.localize(\n              \"ui.panel.config.zha.cluster_commands.header\"\n            )}\n          </span>\n          <ha-icon-button\n            class=\"toggle-help-icon\"\n            @click=${this._onHelpTap}\n            .path=${mdiHelpCircle}\n            .label=${this.hass!.localize(\"ui.common.help\")}\n          >\n          </ha-icon-button>\n        </div>\n        <span slot=\"introduction\">\n          ${this.hass!.localize(\n            \"ui.panel.config.zha.cluster_commands.introduction\"\n          )}\n        </span>\n\n        <ha-card class=\"content\">\n          <div class=\"command-picker\">\n            <ha-select\n              .label=${this.hass!.localize(\n                \"ui.panel.config.zha.cluster_commands.commands_of_cluster\"\n              )}\n              class=\"menu\"\n              .value=${String(this._selectedCommandId)}\n              @selected=${this._selectedCommandChanged}\n              @closed=${stopPropagation}\n              fixedMenuPosition\n              naturalMenuWidth\n            >\n              ${this._commands.map(\n                (entry) => html`\n                  <mwc-list-item .value=${String(entry.id)}>\n                    ${entry.name + \" (id: \" + formatAsPaddedHex(entry.id) + \")\"}\n                  </mwc-list-item>\n                `\n              )}\n            </ha-select>\n          </div>\n          ${this._showHelp\n            ? html`\n                <div class=\"help-text\">\n                  ${this.hass!.localize(\n                    \"ui.panel.config.zha.cluster_commands.help_command_dropdown\"\n                  )}\n                </div>\n              `\n            : \"\"}\n          ${this._selectedCommandId !== undefined\n            ? html`\n                <div class=\"input-text\">\n                  <paper-input\n                    label=${this.hass!.localize(\n                      \"ui.panel.config.zha.common.manufacturer_code_override\"\n                    )}\n                    type=\"number\"\n                    .value=${this._manufacturerCodeOverride}\n                    @value-changed=${this._onManufacturerCodeOverrideChanged}\n                    placeholder=${this.hass!.localize(\n                      \"ui.panel.config.zha.common.value\"\n                    )}\n                  ></paper-input>\n                </div>\n                <div class=\"card-actions\">\n                  <ha-call-service-button\n                    .hass=${this.hass}\n                    domain=\"zha\"\n                    service=\"issue_zigbee_cluster_command\"\n                    .serviceData=${this._issueClusterCommandServiceData}\n                  >\n                    ${this.hass!.localize(\n                      \"ui.panel.config.zha.cluster_commands.issue_zigbee_command\"\n                    )}\n                  </ha-call-service-button>\n                  ${this._showHelp\n                    ? html`\n                        <ha-service-description\n                          .hass=${this.hass}\n                          domain=\"zha\"\n                          service=\"issue_zigbee_cluster_command\"\n                          class=\"help-text2\"\n                        ></ha-service-description>\n                      `\n                    : \"\"}\n                </div>\n              `\n            : \"\"}\n        </ha-card>\n      </ha-config-section>\n    `;\n  }\n\n  private async _fetchCommandsForCluster(): Promise<void> {\n    if (this.selectedNode && this.selectedCluster && this.hass) {\n      this._commands = await fetchCommandsForCluster(\n        this.hass,\n        this.selectedNode!.ieee,\n        this.selectedCluster!.endpoint_id,\n        this.selectedCluster!.id,\n        this.selectedCluster!.type\n      );\n      this._commands.sort((a, b) => a.name.localeCompare(b.name));\n    }\n  }\n\n  private _computeIssueClusterCommandServiceData():\n    | IssueCommandServiceData\n    | undefined {\n    if (!this.selectedNode || !this.selectedCluster) {\n      return undefined;\n    }\n    return {\n      ieee: this.selectedNode!.ieee,\n      endpoint_id: this.selectedCluster!.endpoint_id,\n      cluster_id: this.selectedCluster!.id,\n      cluster_type: this.selectedCluster!.type,\n      command: this._selectedCommandId!,\n      command_type: this._commands.find(\n        (command) => command.id === this._selectedCommandId\n      )!.type,\n    };\n  }\n\n  private _onManufacturerCodeOverrideChanged(value: ChangeEvent): void {\n    this._manufacturerCodeOverride = value.detail!.value;\n    this._issueClusterCommandServiceData =\n      this._computeIssueClusterCommandServiceData();\n  }\n\n  private _onHelpTap(): void {\n    this._showHelp = !this._showHelp;\n  }\n\n  private _selectedCommandChanged(event): void {\n    this._selectedCommandId = Number(event.target.value);\n    this._issueClusterCommandServiceData =\n      this._computeIssueClusterCommandServiceData();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-select {\n          margin-top: 16px;\n        }\n        .menu {\n          width: 100%;\n        }\n\n        .content {\n          margin-top: 24px;\n        }\n\n        ha-card {\n          max-width: 680px;\n        }\n\n        .card-actions.warning ha-call-service-button {\n          color: var(--error-color);\n        }\n\n        .command-picker {\n          align-items: center;\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 10px;\n        }\n\n        .input-text {\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 10px;\n        }\n\n        .help-text {\n          color: grey;\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 16px;\n        }\n\n        .help-text2 {\n          color: grey;\n          padding: 16px;\n        }\n\n        .header {\n          flex-grow: 1;\n        }\n\n        .toggle-help-icon {\n          float: right;\n          top: -6px;\n          right: 0;\n          padding-right: 0px;\n          color: var(--primary-color);\n        }\n\n        ha-service-description {\n          display: block;\n          color: grey;\n        }\n\n        [hidden] {\n          display: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-cluster-commands\": ZHAClusterCommands;\n  }\n}\n\ncustomElements.define(\"zha-cluster-commands\", ZHAClusterCommands);\n","import \"@material/mwc-list/mwc-list-item\";\nimport { mdiHelpCircle } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../../../common/dom/stop_propagation\";\nimport \"../../../../../components/buttons/ha-call-service-button\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-icon-button\";\nimport \"../../../../../components/ha-select\";\nimport \"../../../../../components/ha-service-description\";\nimport {\n  Cluster,\n  fetchClustersForZhaNode,\n  ZHADevice,\n} from \"../../../../../data/zha\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport \"../../../ha-config-section\";\nimport { computeClusterKey } from \"./functions\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"zha-cluster-selected\": {\n      cluster?: Cluster;\n    };\n  }\n}\n\nexport class ZHAClusters extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public isWide?: boolean;\n\n  @property() public selectedDevice?: ZHADevice;\n\n  @property() public showHelp = false;\n\n  @state() private _selectedClusterIndex = -1;\n\n  @state() private _clusters: Cluster[] = [];\n\n  protected updated(changedProperties: PropertyValues): void {\n    if (changedProperties.has(\"selectedDevice\")) {\n      this._clusters = [];\n      this._selectedClusterIndex = -1;\n      fireEvent(this, \"zha-cluster-selected\", {\n        cluster: undefined,\n      });\n      this._fetchClustersForZhaNode();\n    }\n    super.update(changedProperties);\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-config-section .isWide=${this.isWide}>\n        <div class=\"header\" slot=\"header\">\n          <ha-icon-button\n            class=\"toggle-help-icon\"\n            @click=${this._onHelpTap}\n            .path=${mdiHelpCircle}\n            .label=${this.hass!.localize(\"ui.common.help\")}\n          >\n          </ha-icon-button>\n        </div>\n        <span slot=\"introduction\">\n          ${this.hass!.localize(\"ui.panel.config.zha.clusters.introduction\")}\n        </span>\n\n        <ha-card class=\"content\">\n          <div class=\"node-picker\">\n            <ha-select\n              .label=${this.hass!.localize(\n                \"ui.panel.config.zha.common.clusters\"\n              )}\n              class=\"menu\"\n              .value=${String(this._selectedClusterIndex)}\n              @selected=${this._selectedClusterChanged}\n              @closed=${stopPropagation}\n              fixedMenuPosition\n              naturalMenuWidth\n            >\n              ${this._clusters.map(\n                (entry, idx) => html`\n                  <mwc-list-item .value=${String(idx)}\n                    >${computeClusterKey(entry)}</mwc-list-item\n                  >\n                `\n              )}\n            </ha-select>\n          </div>\n          ${this.showHelp\n            ? html`\n                <div class=\"help-text\">\n                  ${this.hass!.localize(\n                    \"ui.panel.config.zha.clusters.help_cluster_dropdown\"\n                  )}\n                </div>\n              `\n            : \"\"}\n        </ha-card>\n      </ha-config-section>\n    `;\n  }\n\n  private async _fetchClustersForZhaNode(): Promise<void> {\n    if (this.hass) {\n      this._clusters = await fetchClustersForZhaNode(\n        this.hass,\n        this.selectedDevice!.ieee\n      );\n      this._clusters.sort((a, b) => a.name.localeCompare(b.name));\n    }\n  }\n\n  private _selectedClusterChanged(event): void {\n    this._selectedClusterIndex = Number(event.target!.value);\n    fireEvent(this, \"zha-cluster-selected\", {\n      cluster: this._clusters[this._selectedClusterIndex],\n    });\n  }\n\n  private _onHelpTap(): void {\n    this.showHelp = !this.showHelp;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-select {\n          margin-top: 16px;\n        }\n        .menu {\n          width: 100%;\n        }\n\n        .content {\n          margin-top: 24px;\n        }\n\n        .header {\n          flex-grow: 1;\n        }\n\n        ha-card {\n          max-width: 680px;\n        }\n\n        .node-picker {\n          align-items: center;\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 10px;\n        }\n\n        .toggle-help-icon {\n          float: right;\n          top: -6px;\n          right: 0;\n          padding-right: 0px;\n          color: var(--primary-color);\n        }\n\n        [hidden] {\n          display: none;\n        }\n\n        .help-text {\n          color: grey;\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-cluster\": ZHAClusters;\n  }\n}\n\ncustomElements.define(\"zha-clusters\", ZHAClusters);\n","import \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiHelpCircle } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { stopPropagation } from \"../../../../../common/dom/stop_propagation\";\nimport \"../../../../../components/buttons/ha-call-service-button\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-icon-button\";\nimport \"../../../../../components/ha-select\";\nimport \"../../../../../components/ha-service-description\";\nimport { bindDevices, unbindDevices, ZHADevice } from \"../../../../../data/zha\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport \"../../../ha-config-section\";\nimport { ItemSelectedEvent } from \"./types\";\n\n@customElement(\"zha-device-binding-control\")\nexport class ZHADeviceBindingControl extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public isWide?: boolean;\n\n  @property() public selectedDevice?: ZHADevice;\n\n  @state() private _showHelp = false;\n\n  @state() private _bindTargetIndex = -1;\n\n  @state() private bindableDevices: ZHADevice[] = [];\n\n  @state() private _deviceToBind?: ZHADevice;\n\n  protected updated(changedProperties: PropertyValues): void {\n    if (changedProperties.has(\"selectedDevice\")) {\n      this._bindTargetIndex = -1;\n    }\n    super.update(changedProperties);\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-config-section .isWide=${this.isWide}>\n        <div class=\"header\" slot=\"header\">\n          <span>Device Binding</span>\n          <ha-icon-button\n            class=\"toggle-help-icon\"\n            @click=${this._onHelpTap}\n            .path=${mdiHelpCircle}\n            .label=${this.hass!.localize(\"ui.common.help\")}\n          >\n          </ha-icon-button>\n        </div>\n        <span slot=\"introduction\">Bind and unbind devices.</span>\n\n        <ha-card class=\"content\">\n          <div class=\"command-picker\">\n            <ha-select\n              label=\"Bindable Devices\"\n              class=\"menu\"\n              .value=${String(this._bindTargetIndex)}\n              @selected=${this._bindTargetIndexChanged}\n              @closed=${stopPropagation}\n              fixedMenuPosition\n              naturalMenuWidth\n            >\n              ${this.bindableDevices.map(\n                (device, idx) => html`\n                  <mwc-list-item .value=${String(idx)}>\n                    ${device.user_given_name\n                      ? device.user_given_name\n                      : device.name}\n                  </mwc-list-item>\n                `\n              )}\n            </ha-select>\n          </div>\n          ${this._showHelp\n            ? html`\n                <div class=\"helpText\">\n                  Select a device to issue a bind command.\n                </div>\n              `\n            : \"\"}\n          <div class=\"card-actions\">\n            <mwc-button\n              @click=${this._onBindDevicesClick}\n              .disabled=${!(this._deviceToBind && this.selectedDevice)}\n              >Bind</mwc-button\n            >\n            ${this._showHelp\n              ? html` <div class=\"helpText\">Bind devices.</div> `\n              : \"\"}\n            <mwc-button\n              @click=${this._onUnbindDevicesClick}\n              .disabled=${!(this._deviceToBind && this.selectedDevice)}\n              >Unbind</mwc-button\n            >\n            ${this._showHelp\n              ? html` <div class=\"helpText\">Unbind devices.</div> `\n              : \"\"}\n          </div>\n        </ha-card>\n      </ha-config-section>\n    `;\n  }\n\n  private _bindTargetIndexChanged(event: ItemSelectedEvent): void {\n    this._bindTargetIndex = Number(event.target!.value);\n    this._deviceToBind =\n      this._bindTargetIndex === -1\n        ? undefined\n        : this.bindableDevices[this._bindTargetIndex];\n  }\n\n  private _onHelpTap(): void {\n    this._showHelp = !this._showHelp;\n  }\n\n  private async _onBindDevicesClick(): Promise<void> {\n    if (this.hass && this._deviceToBind && this.selectedDevice) {\n      await bindDevices(\n        this.hass,\n        this.selectedDevice.ieee,\n        this._deviceToBind.ieee\n      );\n    }\n  }\n\n  private async _onUnbindDevicesClick(): Promise<void> {\n    if (this.hass && this._deviceToBind && this.selectedDevice) {\n      await unbindDevices(\n        this.hass,\n        this.selectedDevice.ieee,\n        this._deviceToBind.ieee\n      );\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .menu {\n          width: 100%;\n        }\n\n        .content {\n          margin-top: 24px;\n        }\n\n        ha-card {\n          max-width: 680px;\n        }\n\n        .card-actions.warning ha-call-service-button {\n          color: var(--error-color);\n        }\n\n        .command-picker {\n          align-items: center;\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 10px;\n        }\n\n        .helpText {\n          color: grey;\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 10px;\n        }\n\n        .header {\n          flex-grow: 1;\n        }\n\n        .toggle-help-icon {\n          float: right;\n          top: -6px;\n          right: 0;\n          padding-right: 0px;\n          color: var(--primary-color);\n        }\n\n        ha-service-description {\n          display: block;\n          color: grey;\n        }\n\n        [hidden] {\n          display: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-device-binding-control\": ZHADeviceBindingControl;\n  }\n}\n","import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { computeRTLDirection } from \"../../../../../common/util/compute_rtl\";\nimport \"../../../../../components/data-table/ha-data-table\";\nimport type {\n  DataTableColumnContainer,\n  HaDataTable,\n} from \"../../../../../components/data-table/ha-data-table\";\nimport type { Cluster } from \"../../../../../data/zha\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { formatAsPaddedHex } from \"./functions\";\n\nexport interface ClusterRowData extends Cluster {\n  cluster?: Cluster;\n  cluster_id?: string;\n}\n\n@customElement(\"zha-clusters-data-table\")\nexport class ZHAClustersDataTable extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public narrow = false;\n\n  @property() public clusters: Cluster[] = [];\n\n  @query(\"ha-data-table\", true) private _dataTable!: HaDataTable;\n\n  private _clusters = memoizeOne((clusters: Cluster[]) => {\n    let outputClusters: ClusterRowData[] = clusters;\n\n    outputClusters = outputClusters.map((cluster) => ({\n      ...cluster,\n      cluster_id: cluster.endpoint_id + \"-\" + cluster.id,\n    }));\n\n    return outputClusters;\n  });\n\n  private _columns = memoizeOne(\n    (narrow: boolean): DataTableColumnContainer =>\n      narrow\n        ? {\n            name: {\n              title: \"Name\",\n              sortable: true,\n              direction: \"asc\",\n              grows: true,\n            },\n          }\n        : {\n            name: {\n              title: \"Name\",\n              sortable: true,\n              direction: \"asc\",\n              grows: true,\n            },\n            id: {\n              title: \"ID\",\n              template: (id: number) => html` ${formatAsPaddedHex(id)} `,\n              sortable: true,\n              width: \"15%\",\n            },\n            endpoint_id: {\n              title: \"Endpoint ID\",\n              sortable: true,\n              width: \"15%\",\n            },\n          }\n  );\n\n  public clearSelection() {\n    this._dataTable.clearSelection();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-data-table\n        .hass=${this.hass}\n        .columns=${this._columns(this.narrow)}\n        .data=${this._clusters(this.clusters)}\n        .id=${\"cluster_id\"}\n        selectable\n        auto-height\n        .dir=${computeRTLDirection(this.hass)}\n        .searchLabel=${this.hass.localize(\"ui.components.data-table.search\")}\n        .noDataText=${this.hass.localize(\"ui.components.data-table.no-data\")}\n      ></ha-data-table>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-clusters-data-table\": ZHAClustersDataTable;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { mdiHelpCircle } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators\";\nimport type { HASSDomEvent } from \"../../../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../../../common/dom/stop_propagation\";\nimport \"../../../../../components/buttons/ha-call-service-button\";\nimport { SelectionChangedEvent } from \"../../../../../components/data-table/ha-data-table\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-icon-button\";\nimport \"../../../../../components/ha-service-description\";\nimport {\n  bindDeviceToGroup,\n  Cluster,\n  fetchClustersForZhaNode,\n  unbindDeviceFromGroup,\n  ZHADevice,\n  ZHAGroup,\n} from \"../../../../../data/zha\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport \"../../../ha-config-section\";\nimport { ItemSelectedEvent } from \"./types\";\nimport \"./zha-clusters-data-table\";\nimport type { ZHAClustersDataTable } from \"./zha-clusters-data-table\";\n\n@customElement(\"zha-group-binding-control\")\nexport class ZHAGroupBindingControl extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public isWide?: boolean;\n\n  @property() public narrow?: boolean;\n\n  @property() public selectedDevice?: ZHADevice;\n\n  @state() private _showHelp = false;\n\n  @state() private _bindTargetIndex = -1;\n\n  @state() private groups: ZHAGroup[] = [];\n\n  @state() private _selectedClusters: string[] = [];\n\n  @state() private _clusters: Cluster[] = [];\n\n  private _groupToBind?: ZHAGroup;\n\n  private _clustersToBind?: Cluster[];\n\n  @query(\"zha-clusters-data-table\", true)\n  private _zhaClustersDataTable!: ZHAClustersDataTable;\n\n  protected updated(changedProperties: PropertyValues): void {\n    if (changedProperties.has(\"selectedDevice\")) {\n      this._bindTargetIndex = -1;\n      this._selectedClusters = [];\n      this._clustersToBind = [];\n      this._fetchClustersForZhaNode();\n    }\n    super.update(changedProperties);\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-config-section .isWide=${this.isWide}>\n        <div class=\"sectionHeader\" slot=\"header\">\n          <span\n            >${this.hass!.localize(\n              \"ui.panel.config.zha.group_binding.header\"\n            )}</span\n          >\n          <ha-icon-button\n            class=\"toggle-help-icon\"\n            @click=${this._onHelpTap}\n            .path=${mdiHelpCircle}\n            .label=${this.hass!.localize(\"ui.common.help\")}\n          >\n          </ha-icon-button>\n        </div>\n        <span slot=\"introduction\"\n          >${this.hass!.localize(\n            \"ui.panel.config.zha.group_binding.introduction\"\n          )}</span\n        >\n\n        <ha-card class=\"content\">\n          <div class=\"command-picker\">\n            <ha-select\n              .label=${this.hass!.localize(\n                \"ui.panel.config.zha.group_binding.group_picker_label\"\n              )}\n              class=\"menu\"\n              .value=${String(this._bindTargetIndex)}\n              @selected=${this._bindTargetIndexChanged}\n              @closed=${stopPropagation}\n              fixedMenuPosition\n              naturalMenuWidth\n            >\n              ${this.groups.map(\n                (group, idx) =>\n                  html`<mwc-list-item .value=${String(idx)}\n                    >${group.name}</mwc-list-item\n                  > `\n              )}\n            </ha-select>\n          </div>\n          ${this._showHelp\n            ? html`\n                <div class=\"helpText\">\n                  ${this.hass!.localize(\n                    \"ui.panel.config.zha.group_binding.group_picker_help\"\n                  )}\n                </div>\n              `\n            : \"\"}\n          <div class=\"command-picker\">\n            <zha-clusters-data-table\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n              .clusters=${this._clusters}\n              @selection-changed=${this._handleClusterSelectionChanged}\n              class=\"menu\"\n            ></zha-clusters-data-table>\n          </div>\n          ${this._showHelp\n            ? html`\n                <div class=\"helpText\">\n                  ${this.hass!.localize(\n                    \"ui.panel.config.zha.group_binding.cluster_selection_help\"\n                  )}\n                </div>\n              `\n            : \"\"}\n          <div class=\"card-actions\">\n            <mwc-button\n              @click=${this._onBindGroupClick}\n              .disabled=${!this._canBind}\n              >${this.hass!.localize(\n                \"ui.panel.config.zha.group_binding.bind_button_label\"\n              )}</mwc-button\n            >\n            ${this._showHelp\n              ? html`\n                  <div class=\"helpText\">\n                    ${this.hass!.localize(\n                      \"ui.panel.config.zha.group_binding.bind_button_help\"\n                    )}\n                  </div>\n                `\n              : \"\"}\n            <mwc-button\n              @click=${this._onUnbindGroupClick}\n              .disabled=${!this._canBind}\n              >${this.hass!.localize(\n                \"ui.panel.config.zha.group_binding.unbind_button_label\"\n              )}</mwc-button\n            >\n            ${this._showHelp\n              ? html`\n                  <div class=\"helpText\">\n                    ${this.hass!.localize(\n                      \"ui.panel.config.zha.group_binding.unbind_button_help\"\n                    )}\n                  </div>\n                `\n              : \"\"}\n          </div>\n        </ha-card>\n      </ha-config-section>\n    `;\n  }\n\n  private _bindTargetIndexChanged(event: ItemSelectedEvent): void {\n    this._bindTargetIndex = Number(event.target!.value);\n    this._groupToBind =\n      this._bindTargetIndex === -1\n        ? undefined\n        : this.groups[this._bindTargetIndex];\n  }\n\n  private _onHelpTap(): void {\n    this._showHelp = !this._showHelp;\n  }\n\n  private async _onBindGroupClick(): Promise<void> {\n    if (this.hass && this._canBind) {\n      await bindDeviceToGroup(\n        this.hass,\n        this.selectedDevice!.ieee,\n        this._groupToBind!.group_id,\n        this._clustersToBind!\n      );\n      this._zhaClustersDataTable.clearSelection();\n    }\n  }\n\n  private async _onUnbindGroupClick(): Promise<void> {\n    if (this.hass && this._canBind) {\n      await unbindDeviceFromGroup(\n        this.hass,\n        this.selectedDevice!.ieee,\n        this._groupToBind!.group_id,\n        this._clustersToBind!\n      );\n      this._zhaClustersDataTable.clearSelection();\n    }\n  }\n\n  private _handleClusterSelectionChanged(\n    ev: HASSDomEvent<SelectionChangedEvent>\n  ): void {\n    this._selectedClusters = ev.detail.value;\n\n    this._clustersToBind = [];\n    for (const clusterIndex of this._selectedClusters) {\n      const selectedCluster = this._clusters.find(\n        (cluster) => clusterIndex === cluster.endpoint_id + \"-\" + cluster.id\n      );\n      this._clustersToBind.push(selectedCluster!);\n    }\n  }\n\n  private async _fetchClustersForZhaNode(): Promise<void> {\n    if (this.hass) {\n      this._clusters = await fetchClustersForZhaNode(\n        this.hass,\n        this.selectedDevice!.ieee\n      );\n      this._clusters = this._clusters\n        .filter((cluster) => cluster.type.toLowerCase() === \"out\")\n        .sort((a, b) => a.name.localeCompare(b.name));\n    }\n  }\n\n  private get _canBind(): boolean {\n    return Boolean(\n      this._groupToBind &&\n        this._clustersToBind &&\n        this._clustersToBind?.length > 0 &&\n        this.selectedDevice\n    );\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .menu {\n          width: 100%;\n        }\n\n        .content {\n          margin-top: 24px;\n        }\n\n        ha-card {\n          max-width: 680px;\n        }\n\n        .card-actions.warning ha-call-service-button {\n          color: var(--error-color);\n        }\n\n        .command-picker {\n          align-items: center;\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 10px;\n        }\n\n        .input-text {\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 10px;\n        }\n\n        .sectionHeader {\n          flex-grow: 1;\n        }\n\n        .helpText {\n          color: grey;\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 10px;\n        }\n\n        .toggle-help-icon {\n          float: right;\n          top: -6px;\n          right: 0;\n          padding-right: 0px;\n          color: var(--primary-color);\n        }\n\n        ha-service-description {\n          display: block;\n          color: grey;\n        }\n\n        [hidden] {\n          display: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-group-binding-control\": ZHAGroupBindingControl;\n  }\n}\n","import {\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { HASSDomEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-code-editor\";\nimport { createCloseHeading } from \"../../../../../components/ha-dialog\";\nimport {\n  Cluster,\n  fetchBindableDevices,\n  fetchGroups,\n  ZHADevice,\n  ZHAGroup,\n} from \"../../../../../data/zha\";\nimport { haStyleDialog } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { sortZHADevices, sortZHAGroups } from \"./functions\";\nimport { ZHADeviceZigbeeInfoDialogParams } from \"./show-dialog-zha-device-zigbee-info\";\nimport { ZHAClusterSelectedParams } from \"./types\";\nimport \"./zha-cluster-attributes\";\nimport \"./zha-cluster-commands\";\nimport \"./zha-clusters\";\nimport \"./zha-device-binding\";\nimport \"./zha-group-binding\";\n\n@customElement(\"dialog-zha-cluster\")\nclass DialogZHACluster extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _device?: ZHADevice;\n\n  @state() private _selectedCluster?: Cluster;\n\n  @state() private _bindableDevices: ZHADevice[] = [];\n\n  @state() private _groups: ZHAGroup[] = [];\n\n  public async showDialog(\n    params: ZHADeviceZigbeeInfoDialogParams\n  ): Promise<void> {\n    this._device = params.device;\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.update(changedProperties);\n    if (changedProperties.has(\"_device\")) {\n      this._fetchData();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._device) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        hideActions\n        @closed=${this._close}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.zha.clusters.header\")\n        )}\n      >\n        <zha-clusters\n          .hass=${this.hass}\n          .selectedDevice=${this._device}\n          @zha-cluster-selected=${this._onClusterSelected}\n        ></zha-clusters>\n        ${this._selectedCluster\n          ? html`\n              <zha-cluster-attributes\n                .hass=${this.hass}\n                .selectedNode=${this._device}\n                .selectedCluster=${this._selectedCluster}\n              ></zha-cluster-attributes>\n              <zha-cluster-commands\n                .hass=${this.hass}\n                .selectedNode=${this._device}\n                .selectedCluster=${this._selectedCluster}\n              ></zha-cluster-commands>\n            `\n          : \"\"}\n        ${this._bindableDevices.length > 0\n          ? html`\n              <zha-device-binding-control\n                .hass=${this.hass}\n                .selectedDevice=${this._device}\n                .bindableDevices=${this._bindableDevices}\n              ></zha-device-binding-control>\n            `\n          : \"\"}\n        ${this._device && this._groups.length > 0\n          ? html`\n              <zha-group-binding-control\n                .hass=${this.hass}\n                .selectedDevice=${this._device}\n                .groups=${this._groups}\n              ></zha-group-binding-control>\n            `\n          : \"\"}\n      </ha-dialog>\n    `;\n  }\n\n  private _onClusterSelected(\n    selectedClusterEvent: HASSDomEvent<ZHAClusterSelectedParams>\n  ): void {\n    this._selectedCluster = selectedClusterEvent.detail.cluster;\n  }\n\n  private _close(): void {\n    this._device = undefined;\n  }\n\n  private async _fetchData(): Promise<void> {\n    if (this._device && this.hass) {\n      this._bindableDevices =\n        this._device && this._device.device_type !== \"Coordinator\"\n          ? (await fetchBindableDevices(this.hass, this._device.ieee)).sort(\n              sortZHADevices\n            )\n          : [];\n      this._groups = (await fetchGroups(this.hass!)).sort(sortZHAGroups);\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyleDialog;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-zha-cluster\": DialogZHACluster;\n  }\n}\n"],"names":[],"sourceRoot":""}