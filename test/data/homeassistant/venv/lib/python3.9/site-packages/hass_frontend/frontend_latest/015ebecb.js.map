{"version":3,"file":"015ebecb.js","mappings":";;AA+CA;;AAEA;AACA;AACA;;;AAKA;;AAEA;AACA;AACA;;AAKA;AACA;AAGA;AACA;AACA;AAGA;AAKA;AAJA;;;;;;;;;;;;;;;;AAjDA;ACIA;;AAGA;AACA;;;;;;AAMA;;;;;AAKA;;;AAIA;AACA;;;AAGA;;AAEA;;;AAIA;;AAGA;AAIA;AAEA;AACA;;AAGA;AACA;AACA;AACA;;;;AAtDA;;;;;AAAA;AC+CA;AACA;;AAIA;;;;;AAOA;;AAIA;AACA;;;AAGA;;AAGA;AAGA;;;AAKA;AACA;;AAEA;;AAGA;AACA;;;;;AAOA;;;;AAKA;AACA;;AAEA;;;AAKA;;AAEA;;;;AAMA;AACA;;AAEA;;;;AAIA;;;;;;;AAQA;;;AAKA;;AAIA;AACA;AAGA;AACA;AACA;;AAEA;;;AAOA;AAGA;AACA;;;AAKA;AACA;AAEA;AAKA;;;;;AAKA;;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;;AAEA;AAGA;;AAzBA;AA8BA;AAGA;;AAlMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACmFA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;AAIA;;AAEA;AACA;;;AAIA;AACA;;;AAIA;;AAIA;;AAEA;AACA;;;AAIA;AACA;;;;;;AAOA;AACA;;;AAKA;;;;;;;;AAUA;AACA;AAGA;;;AAGA;;AAIA;;;;;;;;AAQA;AAEA;;AAIA;AAGA;;AAEA;AAGA;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAGA;;;AAIA;;AAEA;;;;;AAMA;AACA;AACA;;;;AAMA;AACA;;AAEA;;;AAKA;;;;AAMA;AACA;AACA;;;;AAIA;AACA;;;;AAMA;;AAGA;;;AAIA;AACA;;AAEA;;;;;AAhOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACiBA;AACA;;AAIA;AAWA;;AAEA;AACA;;AAOA;AAUA;AAKA;;AAMA;;AAGA;;AAGA;AACA;AACA;;AAEA;;AAKA;;AAQA;AACA;AACA;;;;AA8DA;;AAOA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;AAKA;;AAEA;;;;;AAKA;AACA;AACA;;AAEA;;;;;AAKA;;AAIA;;;;;;AAiCA;;;AAGA;;;;AAIA;;;;AC1QA;;AAIA;;;;;AAOA;;AAIA;AACA;;;AAGA;;AAGA;AAGA;;;AAKA;AACA;;AAEA;;AAGA;AACA;;;;;AAOA;AAIA;;;AAGA;;;;AAOA;AAGA;AACA;;;AAGA;AAEA;AACA;;;;AAOA;;AAGA;;;AAKA;AACA;;;;AAIA;;AAGA;;;;AAKA;AACA;;AAEA;;;AAKA;;AAEA;;;;AAMA;AACA;;AAEA;;;;AAIA;;;;AAKA;;AAEA;;;;AAMA;;;AAKA;;;;AAIA;;;;AAMA;AACA;AACA;;;;AAIA;;AAEA;;;;AAMA;;;AAKA;;;;AAIA;;;;AAMA;AACA;AACA;;;;AAIA;;AAEA;;;;AAMA;;;AAKA;;;;AAIA;;;;AAMA;AACA;AACA;AACA;;AA/NA;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/entity/ha-entity-toggle.ts","webpack://home-assistant-frontend/./src/components/ha-icon-overflow-menu.ts","webpack://home-assistant-frontend/./src/panels/config/automation/blueprint-automation-editor.ts","webpack://home-assistant-frontend/./src/panels/config/automation/ha-automation-editor.ts","webpack://home-assistant-frontend/./src/panels/config/automation/ha-automation-picker.ts","webpack://home-assistant-frontend/./src/panels/config/automation/manual-automation-editor.ts"],"sourcesContent":["import { mdiFlash, mdiFlashOff } from \"@mdi/js\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { STATES_OFF } from \"../../common/const\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { UNAVAILABLE, UNAVAILABLE_STATES, UNKNOWN } from \"../../data/entity\";\nimport { forwardHaptic } from \"../../data/haptics\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-formfield\";\nimport \"../ha-icon-button\";\nimport \"../ha-switch\";\n\nconst isOn = (stateObj?: HassEntity) =>\n  stateObj !== undefined &&\n  !STATES_OFF.includes(stateObj.state) &&\n  !UNAVAILABLE_STATES.includes(stateObj.state);\n\nexport class HaEntityToggle extends LitElement {\n  // hass is not a property so that we only re-render on stateObj changes\n  public hass?: HomeAssistant;\n\n  @property() public stateObj?: HassEntity;\n\n  @property() public label?: string;\n\n  @state() private _isOn = false;\n\n  protected render(): TemplateResult {\n    if (!this.stateObj) {\n      return html` <ha-switch disabled></ha-switch> `;\n    }\n\n    if (\n      this.stateObj.attributes.assumed_state ||\n      this.stateObj.state === UNKNOWN\n    ) {\n      return html`\n        <ha-icon-button\n          .label=${`Turn ${computeStateName(this.stateObj)} off`}\n          .path=${mdiFlashOff}\n          .disabled=${this.stateObj.state === UNAVAILABLE}\n          @click=${this._turnOff}\n          class=${!this._isOn && this.stateObj.state !== UNKNOWN\n            ? \"state-active\"\n            : \"\"}\n        ></ha-icon-button>\n        <ha-icon-button\n          .label=${`Turn ${computeStateName(this.stateObj)} on`}\n          .path=${mdiFlash}\n          .disabled=${this.stateObj.state === UNAVAILABLE}\n          @click=${this._turnOn}\n          class=${this._isOn ? \"state-active\" : \"\"}\n        ></ha-icon-button>\n      `;\n    }\n\n    const switchTemplate = html`<ha-switch\n      aria-label=${`Toggle ${computeStateName(this.stateObj)} ${\n        this._isOn ? \"off\" : \"on\"\n      }`}\n      .checked=${this._isOn}\n      .disabled=${this.stateObj.state === UNAVAILABLE}\n      @change=${this._toggleChanged}\n    ></ha-switch>`;\n\n    if (!this.label) {\n      return switchTemplate;\n    }\n\n    return html`\n      <ha-formfield .label=${this.label}>${switchTemplate}</ha-formfield>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this.addEventListener(\"click\", (ev) => ev.stopPropagation());\n  }\n\n  public willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (changedProps.has(\"stateObj\")) {\n      this._isOn = isOn(this.stateObj);\n    }\n  }\n\n  private _toggleChanged(ev) {\n    const newVal = ev.target.checked;\n\n    if (newVal !== this._isOn) {\n      this._callService(newVal);\n    }\n  }\n\n  private _turnOn() {\n    this._callService(true);\n  }\n\n  private _turnOff() {\n    this._callService(false);\n  }\n\n  // We will force a re-render after a successful call to re-sync the toggle\n  // with the state. It will be out of sync if our service call did not\n  // result in the entity to be turned on. Since the state is not changing,\n  // the resync is not called automatic.\n  private async _callService(turnOn): Promise<void> {\n    if (!this.hass || !this.stateObj) {\n      return;\n    }\n    forwardHaptic(\"light\");\n    const stateDomain = computeStateDomain(this.stateObj);\n    let serviceDomain;\n    let service;\n\n    if (stateDomain === \"lock\") {\n      serviceDomain = \"lock\";\n      service = turnOn ? \"unlock\" : \"lock\";\n    } else if (stateDomain === \"cover\") {\n      serviceDomain = \"cover\";\n      service = turnOn ? \"open_cover\" : \"close_cover\";\n    } else if (stateDomain === \"group\") {\n      serviceDomain = \"homeassistant\";\n      service = turnOn ? \"turn_on\" : \"turn_off\";\n    } else {\n      serviceDomain = stateDomain;\n      service = turnOn ? \"turn_on\" : \"turn_off\";\n    }\n\n    const currentState = this.stateObj;\n\n    // Optimistic update.\n    this._isOn = turnOn;\n\n    await this.hass.callService(serviceDomain, service, {\n      entity_id: this.stateObj.entity_id,\n    });\n\n    setTimeout(async () => {\n      // If after 2 seconds we have not received a state update\n      // reset the switch to it's original state.\n      if (this.stateObj === currentState) {\n        this._isOn = isOn(this.stateObj);\n      }\n    }, 2000);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        white-space: nowrap;\n        min-width: 38px;\n      }\n      ha-icon-button {\n        --mdc-icon-button-size: 40px;\n        color: var(--ha-icon-button-inactive-color, var(--primary-text-color));\n        transition: color 0.5s;\n      }\n      ha-icon-button.state-active {\n        color: var(--ha-icon-button-active-color, var(--primary-color));\n      }\n      ha-switch {\n        padding: 13px 5px;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-entity-toggle\", HaEntityToggle);\n","import \"@material/mwc-list/mwc-list-item\";\nimport { mdiDotsVertical } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-button-menu\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nexport interface IconOverflowMenuItem {\n  [key: string]: any;\n  path: string;\n  label: string;\n  narrowOnly?: boolean;\n  disabled?: boolean;\n  tooltip?: string;\n  onClick: CallableFunction;\n}\n\n@customElement(\"ha-icon-overflow-menu\")\nexport class HaIconOverflowMenu extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Array }) public items: IconOverflowMenuItem[] = [];\n\n  @property({ type: Boolean }) public narrow = false;\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.narrow\n        ? html` <!-- Collapsed representation for small screens -->\n            <ha-button-menu\n              @click=${this._handleIconOverflowMenuOpened}\n              @closed=${this._handleIconOverflowMenuClosed}\n              class=\"ha-icon-overflow-menu-overflow\"\n              corner=\"BOTTOM_START\"\n              absolute\n            >\n              <ha-icon-button\n                .label=${this.hass.localize(\"ui.common.overflow_menu\")}\n                .path=${mdiDotsVertical}\n                slot=\"trigger\"\n              ></ha-icon-button>\n\n              ${this.items.map(\n                (item) => html`\n                  <mwc-list-item\n                    graphic=\"icon\"\n                    .disabled=${item.disabled}\n                    @click=${item.action}\n                  >\n                    <div slot=\"graphic\">\n                      <ha-svg-icon .path=${item.path}></ha-svg-icon>\n                    </div>\n                    ${item.label}\n                  </mwc-list-item>\n                `\n              )}\n            </ha-button-menu>`\n        : html`\n            <!-- Icon representation for big screens -->\n            ${this.items.map((item) =>\n              item.narrowOnly\n                ? \"\"\n                : html`<div>\n                    ${item.tooltip\n                      ? html`<paper-tooltip animation-delay=\"0\" position=\"left\">\n                          ${item.tooltip}\n                        </paper-tooltip>`\n                      : \"\"}\n                    <ha-icon-button\n                      @click=${item.action}\n                      .label=${item.label}\n                      .path=${item.path}\n                      .disabled=${item.disabled}\n                    ></ha-icon-button>\n                  </div> `\n            )}\n          `}\n    `;\n  }\n\n  protected _handleIconOverflowMenuOpened() {\n    // If this component is used inside a data table, the z-index of the row\n    // needs to be increased. Otherwise the ha-button-menu would be displayed\n    // underneath the next row in the table.\n    const row = this.closest(\".mdc-data-table__row\") as HTMLDivElement | null;\n    if (row) {\n      row.style.zIndex = \"1\";\n    }\n  }\n\n  protected _handleIconOverflowMenuClosed() {\n    const row = this.closest(\".mdc-data-table__row\") as HTMLDivElement | null;\n    if (row) {\n      row.style.zIndex = \"\";\n    }\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: flex;\n        justify-content: flex-end;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-overflow-menu\": HaIconOverflowMenu;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/entity/ha-entity-toggle\";\nimport \"../../../components/ha-blueprint-picker\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-markdown\";\nimport \"../../../components/ha-selector/ha-selector\";\nimport \"../../../components/ha-settings-row\";\nimport \"../../../components/ha-textfield\";\nimport {\n  BlueprintAutomationConfig,\n  triggerAutomationActions,\n} from \"../../../data/automation\";\nimport {\n  BlueprintOrError,\n  Blueprints,\n  fetchBlueprints,\n} from \"../../../data/blueprint\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport \"../ha-config-section\";\n\n@customElement(\"blueprint-automation-editor\")\nexport class HaBlueprintAutomationEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public isWide!: boolean;\n\n  @property({ reflect: true, type: Boolean }) public narrow!: boolean;\n\n  @property() public config!: BlueprintAutomationConfig;\n\n  @property() public stateObj?: HassEntity;\n\n  @state() private _blueprints?: Blueprints;\n\n  @state() private _showDescription = false;\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._getBlueprints();\n  }\n\n  private get _blueprint(): BlueprintOrError | undefined {\n    if (!this._blueprints) {\n      return undefined;\n    }\n    return this._blueprints[this.config.use_blueprint.path];\n  }\n\n  protected willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (\n      !this._showDescription &&\n      changedProps.has(\"config\") &&\n      this.config.description\n    ) {\n      this._showDescription = true;\n    }\n  }\n\n  protected render() {\n    const blueprint = this._blueprint;\n    return html`\n      <ha-config-section vertical .isWide=${this.isWide}>\n        ${!this.narrow\n          ? html` <span slot=\"header\">${this.config.alias}</span> `\n          : \"\"}\n        <span slot=\"introduction\">\n          ${this.hass.localize(\n            \"ui.panel.config.automation.editor.introduction\"\n          )}\n        </span>\n        <ha-card outlined>\n          <div class=\"card-content\">\n            <ha-textfield\n              .label=${this.hass.localize(\n                \"ui.panel.config.automation.editor.alias\"\n              )}\n              name=\"alias\"\n              .value=${this.config.alias || \"\"}\n              @change=${this._valueChanged}\n            >\n            </ha-textfield>\n            ${this._showDescription\n              ? html`\n                  <ha-textarea\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.automation.editor.description.label\"\n                    )}\n                    .placeholder=${this.hass.localize(\n                      \"ui.panel.config.automation.editor.description.placeholder\"\n                    )}\n                    name=\"description\"\n                    autogrow\n                    .value=${this.config.description || \"\"}\n                    @change=${this._valueChanged}\n                  ></ha-textarea>\n                `\n              : html`\n                  <div class=\"link-button-row\">\n                    <button class=\"link\" @click=${this._addDescription}>\n                      ${this.hass.localize(\n                        \"ui.panel.config.automation.editor.description.add\"\n                      )}\n                    </button>\n                  </div>\n                `}\n          </div>\n          ${this.stateObj\n            ? html`\n                <div class=\"card-actions layout horizontal justified center\">\n                  <div class=\"layout horizontal center\">\n                    <ha-entity-toggle\n                      .hass=${this.hass}\n                      .stateObj=${this.stateObj!}\n                    ></ha-entity-toggle>\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.enable_disable\"\n                    )}\n                  </div>\n                  <div>\n                    <a href=\"/config/automation/trace/${this.config.id}\">\n                      <mwc-button>\n                        ${this.hass.localize(\n                          \"ui.panel.config.automation.editor.show_trace\"\n                        )}\n                      </mwc-button>\n                    </a>\n                    <mwc-button\n                      @click=${this._runActions}\n                      .stateObj=${this.stateObj}\n                    >\n                      ${this.hass.localize(\"ui.card.automation.trigger\")}\n                    </mwc-button>\n                  </div>\n                </div>\n              `\n            : \"\"}\n        </ha-card>\n      </ha-config-section>\n\n      <ha-card\n        outlined\n        class=\"blueprint\"\n        .header=${this.hass.localize(\n          \"ui.panel.config.automation.editor.blueprint.header\"\n        )}\n      >\n        <div class=\"blueprint-picker-container\">\n          ${this._blueprints\n            ? Object.keys(this._blueprints).length\n              ? html`\n                  <ha-blueprint-picker\n                    .hass=${this.hass}\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.automation.editor.blueprint.blueprint_to_use\"\n                    )}\n                    .blueprints=${this._blueprints}\n                    .value=${this.config.use_blueprint.path}\n                    @value-changed=${this._blueprintChanged}\n                  ></ha-blueprint-picker>\n                `\n              : this.hass.localize(\n                  \"ui.panel.config.automation.editor.blueprint.no_blueprints\"\n                )\n            : html`<ha-circular-progress active></ha-circular-progress>`}\n        </div>\n\n        ${this.config.use_blueprint.path\n          ? blueprint && \"error\" in blueprint\n            ? html`<p class=\"warning padding\">\n                There is an error in this Blueprint: ${blueprint.error}\n              </p>`\n            : html`${blueprint?.metadata.description\n                ? html`<ha-markdown\n                    class=\"card-content\"\n                    breaks\n                    .content=${blueprint.metadata.description}\n                  ></ha-markdown>`\n                : \"\"}\n              ${blueprint?.metadata?.input &&\n              Object.keys(blueprint.metadata.input).length\n                ? Object.entries(blueprint.metadata.input).map(\n                    ([key, value]) =>\n                      html`<ha-settings-row .narrow=${this.narrow}>\n                        <span slot=\"heading\">${value?.name || key}</span>\n                        <ha-markdown\n                          slot=\"description\"\n                          class=\"card-content\"\n                          breaks\n                          .content=${value?.description}\n                        ></ha-markdown>\n                        ${value?.selector\n                          ? html`<ha-selector\n                              .hass=${this.hass}\n                              .selector=${value.selector}\n                              .key=${key}\n                              .value=${(this.config.use_blueprint.input &&\n                                this.config.use_blueprint.input[key]) ??\n                              value?.default}\n                              @value-changed=${this._inputChanged}\n                            ></ha-selector>`\n                          : html`<ha-textfield\n                              .key=${key}\n                              required\n                              .value=${(this.config.use_blueprint.input &&\n                                this.config.use_blueprint.input[key]) ??\n                              value?.default}\n                              @input=${this._inputChanged}\n                            ></ha-textfield>`}\n                      </ha-settings-row>`\n                  )\n                : html`<p class=\"padding\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.blueprint.no_inputs\"\n                    )}\n                  </p>`}`\n          : \"\"}\n      </ha-card>\n    `;\n  }\n\n  private async _getBlueprints() {\n    this._blueprints = await fetchBlueprints(this.hass, \"automation\");\n  }\n\n  private _runActions(ev: Event) {\n    triggerAutomationActions(this.hass, (ev.target as any).stateObj.entity_id);\n  }\n\n  private _blueprintChanged(ev) {\n    ev.stopPropagation();\n    if (this.config.use_blueprint.path === ev.detail.value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.config!,\n        use_blueprint: {\n          path: ev.detail.value,\n        },\n      },\n    });\n  }\n\n  private _inputChanged(ev) {\n    ev.stopPropagation();\n    const target = ev.target as any;\n    const key = target.key;\n    const value = ev.detail?.value || target.value;\n    if (\n      (this.config.use_blueprint.input &&\n        this.config.use_blueprint.input[key] === value) ||\n      (!this.config.use_blueprint.input && value === \"\")\n    ) {\n      return;\n    }\n    const input = { ...this.config.use_blueprint.input, [key]: value };\n\n    if (value === \"\" || value === undefined) {\n      delete input[key];\n    }\n\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.config!,\n        use_blueprint: {\n          ...this.config.use_blueprint,\n          input,\n        },\n      },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const target = ev.target as any;\n    const name = target.name;\n    if (!name) {\n      return;\n    }\n    const newVal = target.value;\n    if ((this.config![name] || \"\") === newVal) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.config!, [name]: newVal },\n    });\n  }\n\n  private _addDescription() {\n    this._showDescription = true;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card.blueprint {\n          max-width: 1040px;\n          margin: 24px auto;\n        }\n        .padding {\n          padding: 16px;\n        }\n        .link-button-row {\n          padding: 14px;\n        }\n        .blueprint-picker-container {\n          padding: 0 16px 16px;\n        }\n        ha-textarea,\n        ha-textfield,\n        ha-blueprint-picker {\n          display: block;\n        }\n        h3 {\n          margin: 16px;\n        }\n        span[slot=\"introduction\"] a {\n          color: var(--primary-color);\n        }\n        p {\n          margin-bottom: 0;\n        }\n        ha-entity-toggle {\n          margin-right: 8px;\n        }\n        ha-settings-row {\n          --paper-time-input-justify-content: flex-end;\n          --settings-row-content-width: 100%;\n          --settings-row-prefix-display: contents;\n          border-top: 1px solid var(--divider-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"blueprint-automation-editor\": HaBlueprintAutomationEditor;\n  }\n}\n","import { ActionDetail } from \"@material/mwc-list/mwc-list-foundation\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiCheck,\n  mdiContentDuplicate,\n  mdiContentSave,\n  mdiDelete,\n  mdiDotsVertical,\n} from \"@mdi/js\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property, state, query } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { navigate } from \"../../../common/navigate\";\nimport { copyToClipboard } from \"../../../common/util/copy-clipboard\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-yaml-editor\";\nimport type { HaYamlEditor } from \"../../../components/ha-yaml-editor\";\nimport {\n  AutomationConfig,\n  AutomationEntity,\n  deleteAutomation,\n  getAutomationConfig,\n  getAutomationEditorInitData,\n  showAutomationEditor,\n  triggerAutomationActions,\n} from \"../../../data/automation\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/ha-app-layout\";\nimport \"../../../layouts/hass-tabs-subpage\";\nimport { KeyboardShortcutMixin } from \"../../../mixins/keyboard-shortcut-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { showToast } from \"../../../util/toast\";\nimport \"../ha-config-section\";\nimport { configSections } from \"../ha-panel-config\";\nimport { HaDeviceAction } from \"./action/types/ha-automation-action-device_id\";\nimport \"./blueprint-automation-editor\";\nimport \"./manual-automation-editor\";\nimport { HaDeviceTrigger } from \"./trigger/types/ha-automation-trigger-device\";\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-editor\": HaAutomationEditor;\n  }\n  // for fire event\n  interface HASSDomEvents {\n    \"subscribe-automation-config\": {\n      callback: (config: AutomationConfig) => void;\n      unsub?: UnsubscribeFunc;\n    };\n    \"ui-mode-not-available\": Error;\n    duplicate: undefined;\n  }\n}\n\nexport class HaAutomationEditor extends KeyboardShortcutMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public automationId: string | null = null;\n\n  @property() public automations!: AutomationEntity[];\n\n  @property() public isWide?: boolean;\n\n  @property() public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @state() private _config?: AutomationConfig;\n\n  @state() private _dirty = false;\n\n  @state() private _errors?: string;\n\n  @state() private _entityId?: string;\n\n  @state() private _mode: \"gui\" | \"yaml\" = \"gui\";\n\n  @query(\"ha-yaml-editor\", true) private _editor?: HaYamlEditor;\n\n  private _configSubscriptions: Record<\n    string,\n    (config?: AutomationConfig) => void\n  > = {};\n\n  private _configSubscriptionsId = 1;\n\n  protected render(): TemplateResult {\n    const stateObj = this._entityId\n      ? this.hass.states[this._entityId]\n      : undefined;\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .backCallback=${this._backTapped}\n        .tabs=${configSections.automations}\n      >\n        <ha-button-menu\n          corner=\"BOTTOM_START\"\n          slot=\"toolbar-icon\"\n          @action=${this._handleMenuAction}\n          activatable\n        >\n          <ha-icon-button\n            slot=\"trigger\"\n            .label=${this.hass.localize(\"ui.common.menu\")}\n            .path=${mdiDotsVertical}\n          ></ha-icon-button>\n\n          <mwc-list-item\n            aria-label=${this.hass.localize(\n              \"ui.panel.config.automation.editor.edit_ui\"\n            )}\n            graphic=\"icon\"\n            ?activated=${this._mode === \"gui\"}\n          >\n            ${this.hass.localize(\"ui.panel.config.automation.editor.edit_ui\")}\n            ${this._mode === \"gui\"\n              ? html`<ha-svg-icon\n                  class=\"selected_menu_item\"\n                  slot=\"graphic\"\n                  .path=${mdiCheck}\n                ></ha-svg-icon>`\n              : ``}\n          </mwc-list-item>\n          <mwc-list-item\n            aria-label=${this.hass.localize(\n              \"ui.panel.config.automation.editor.edit_yaml\"\n            )}\n            graphic=\"icon\"\n            ?activated=${this._mode === \"yaml\"}\n          >\n            ${this.hass.localize(\"ui.panel.config.automation.editor.edit_yaml\")}\n            ${this._mode === \"yaml\"\n              ? html`<ha-svg-icon\n                  class=\"selected_menu_item\"\n                  slot=\"graphic\"\n                  .path=${mdiCheck}\n                ></ha-svg-icon>`\n              : ``}\n          </mwc-list-item>\n\n          <li divider role=\"separator\"></li>\n\n          <mwc-list-item\n            .disabled=${!this.automationId}\n            aria-label=${this.hass.localize(\n              \"ui.panel.config.automation.picker.duplicate_automation\"\n            )}\n            graphic=\"icon\"\n          >\n            ${this.hass.localize(\n              \"ui.panel.config.automation.picker.duplicate_automation\"\n            )}\n            <ha-svg-icon\n              slot=\"graphic\"\n              .path=${mdiContentDuplicate}\n            ></ha-svg-icon>\n          </mwc-list-item>\n\n          <mwc-list-item\n            .disabled=${!this.automationId}\n            aria-label=${this.hass.localize(\n              \"ui.panel.config.automation.picker.delete_automation\"\n            )}\n            class=${classMap({ warning: Boolean(this.automationId) })}\n            graphic=\"icon\"\n          >\n            ${this.hass.localize(\n              \"ui.panel.config.automation.picker.delete_automation\"\n            )}\n            <ha-svg-icon\n              class=${classMap({ warning: Boolean(this.automationId) })}\n              slot=\"graphic\"\n              .path=${mdiDelete}\n            >\n            </ha-svg-icon>\n          </mwc-list-item>\n        </ha-button-menu>\n\n        ${this._config\n          ? html`\n              ${this.narrow\n                ? html`<span slot=\"header\">${this._config?.alias}</span>`\n                : \"\"}\n              <div\n                class=\"content ${classMap({\n                  \"yaml-mode\": this._mode === \"yaml\",\n                })}\"\n                @subscribe-automation-config=${this._subscribeAutomationConfig}\n              >\n                ${this._errors\n                  ? html`<div class=\"errors\">${this._errors}</div>`\n                  : \"\"}\n                ${this._mode === \"gui\"\n                  ? html`\n                      ${\"use_blueprint\" in this._config\n                        ? html`\n                            <blueprint-automation-editor\n                              .hass=${this.hass}\n                              .narrow=${this.narrow}\n                              .isWide=${this.isWide}\n                              .stateObj=${stateObj}\n                              .config=${this._config}\n                              @value-changed=${this._valueChanged}\n                            ></blueprint-automation-editor>\n                          `\n                        : html`\n                            <manual-automation-editor\n                              .hass=${this.hass}\n                              .narrow=${this.narrow}\n                              .isWide=${this.isWide}\n                              .stateObj=${stateObj}\n                              .config=${this._config}\n                              @value-changed=${this._valueChanged}\n                            ></manual-automation-editor>\n                          `}\n                    `\n                  : this._mode === \"yaml\"\n                  ? html`\n                      ${!this.narrow\n                        ? html`\n                            <ha-card outlined>\n                              <div class=\"card-header\">\n                                ${this._config.alias}\n                              </div>\n                              ${stateObj\n                                ? html`\n                                    <div\n                                      class=\"card-actions layout horizontal justified center\"\n                                    >\n                                      <ha-entity-toggle\n                                        .hass=${this.hass}\n                                        .stateObj=${stateObj}\n                                        .label=${this.hass.localize(\n                                          \"ui.panel.config.automation.editor.enable_disable\"\n                                        )}\n                                      ></ha-entity-toggle>\n\n                                      <mwc-button\n                                        @click=${this._runActions}\n                                        .stateObj=${stateObj}\n                                      >\n                                        ${this.hass.localize(\n                                          \"ui.card.automation.trigger\"\n                                        )}\n                                      </mwc-button>\n                                    </div>\n                                  `\n                                : \"\"}\n                            </ha-card>\n                          `\n                        : ``}\n                      <ha-yaml-editor\n                        .hass=${this.hass}\n                        .defaultValue=${this._preprocessYaml()}\n                        @value-changed=${this._yamlChanged}\n                      ></ha-yaml-editor>\n                      <ha-card outlined>\n                        <div class=\"card-actions\">\n                          <mwc-button @click=${this._copyYaml}>\n                            ${this.hass.localize(\n                              \"ui.panel.config.automation.editor.copy_to_clipboard\"\n                            )}\n                          </mwc-button>\n                        </div>\n                      </ha-card>\n                    `\n                  : ``}\n              </div>\n            `\n          : \"\"}\n        <ha-fab\n          slot=\"fab\"\n          class=${classMap({ dirty: this._dirty })}\n          .label=${this.hass.localize(\"ui.panel.config.automation.editor.save\")}\n          extended\n          @click=${this._saveAutomation}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiContentSave}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    const oldAutomationId = changedProps.get(\"automationId\");\n    if (\n      changedProps.has(\"automationId\") &&\n      this.automationId &&\n      this.hass &&\n      // Only refresh config if we picked a new automation. If same ID, don't fetch it.\n      oldAutomationId !== this.automationId\n    ) {\n      this._setEntityId();\n      this._loadConfig();\n    }\n\n    if (changedProps.has(\"automationId\") && !this.automationId && this.hass) {\n      const initData = getAutomationEditorInitData();\n      let baseConfig: Partial<AutomationConfig> = {\n        alias: this.hass.localize(\n          \"ui.panel.config.automation.editor.default_name\"\n        ),\n        description: \"\",\n      };\n      if (!initData || !(\"use_blueprint\" in initData)) {\n        baseConfig = {\n          ...baseConfig,\n          mode: \"single\",\n          trigger: [{ platform: \"device\", ...HaDeviceTrigger.defaultConfig }],\n          condition: [],\n          action: [{ ...HaDeviceAction.defaultConfig }],\n        };\n      }\n      this._config = {\n        ...baseConfig,\n        ...initData,\n      } as AutomationConfig;\n      this._entityId = undefined;\n    }\n\n    if (\n      changedProps.has(\"automations\") &&\n      this.automationId &&\n      !this._entityId\n    ) {\n      this._setEntityId();\n    }\n\n    if (changedProps.has(\"_config\")) {\n      Object.values(this._configSubscriptions).forEach((sub) =>\n        sub(this._config)\n      );\n    }\n  }\n\n  private _setEntityId() {\n    const automation = this.automations.find(\n      (entity: AutomationEntity) => entity.attributes.id === this.automationId\n    );\n    this._entityId = automation?.entity_id;\n  }\n\n  private async _loadConfig() {\n    try {\n      const config = await getAutomationConfig(\n        this.hass,\n        this.automationId as string\n      );\n\n      // Normalize data: ensure trigger, action and condition are lists\n      // Happens when people copy paste their automations into the config\n      for (const key of [\"trigger\", \"condition\", \"action\"]) {\n        const value = config[key];\n        if (value && !Array.isArray(value)) {\n          config[key] = [value];\n        }\n      }\n      this._dirty = false;\n      this._config = config;\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text:\n          err.status_code === 404\n            ? this.hass.localize(\n                \"ui.panel.config.automation.editor.load_error_not_editable\"\n              )\n            : this.hass.localize(\n                \"ui.panel.config.automation.editor.load_error_unknown\",\n                \"err_no\",\n                err.status_code\n              ),\n      }).then(() => history.back());\n    }\n  }\n\n  private _valueChanged(ev: CustomEvent<{ value: AutomationConfig }>) {\n    ev.stopPropagation();\n    this._config = ev.detail.value;\n    this._dirty = true;\n    this._errors = undefined;\n  }\n\n  private _runActions(ev: Event) {\n    triggerAutomationActions(this.hass, (ev.target as any).stateObj.entity_id);\n  }\n\n  private _preprocessYaml() {\n    const cleanConfig = this._config;\n    if (!cleanConfig) {\n      return {};\n    }\n\n    delete cleanConfig.id;\n\n    return cleanConfig;\n  }\n\n  private async _copyYaml(): Promise<void> {\n    if (this._editor?.yaml) {\n      await copyToClipboard(this._editor.yaml);\n      showToast(this, {\n        message: this.hass.localize(\"ui.common.copied_clipboard\"),\n      });\n    }\n  }\n\n  private _yamlChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    this._config = ev.detail.value;\n    this._errors = undefined;\n    this._dirty = true;\n  }\n\n  private _backTapped = (): void => {\n    if (this._dirty) {\n      showConfirmationDialog(this, {\n        text: this.hass!.localize(\n          \"ui.panel.config.automation.editor.unsaved_confirm\"\n        ),\n        confirmText: this.hass!.localize(\"ui.common.leave\"),\n        dismissText: this.hass!.localize(\"ui.common.stay\"),\n        confirm: () => {\n          setTimeout(() => history.back());\n        },\n      });\n    } else {\n      history.back();\n    }\n  };\n\n  private async _duplicate() {\n    if (this._dirty) {\n      if (\n        !(await showConfirmationDialog(this, {\n          text: this.hass!.localize(\n            \"ui.panel.config.automation.editor.unsaved_confirm\"\n          ),\n          confirmText: this.hass!.localize(\"ui.common.leave\"),\n          dismissText: this.hass!.localize(\"ui.common.stay\"),\n        }))\n      ) {\n        return;\n      }\n      // Wait for dialog to complete closing\n      await new Promise((resolve) => setTimeout(resolve, 0));\n    }\n    showAutomationEditor({\n      ...this._config,\n      id: undefined,\n      alias: `${this._config?.alias} (${this.hass.localize(\n        \"ui.panel.config.automation.picker.duplicate\"\n      )})`,\n    });\n  }\n\n  private async _deleteConfirm() {\n    showConfirmationDialog(this, {\n      text: this.hass.localize(\n        \"ui.panel.config.automation.picker.delete_confirm\"\n      ),\n      confirmText: this.hass!.localize(\"ui.common.delete\"),\n      dismissText: this.hass!.localize(\"ui.common.cancel\"),\n      confirm: () => this._delete(),\n    });\n  }\n\n  private async _delete() {\n    await deleteAutomation(this.hass, this.automationId as string);\n    history.back();\n  }\n\n  private async _handleMenuAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        this._mode = \"gui\";\n        break;\n      case 1:\n        this._mode = \"yaml\";\n        break;\n      case 2:\n        this._duplicate();\n        break;\n      case 3:\n        this._deleteConfirm();\n        break;\n    }\n  }\n\n  private _saveAutomation(): void {\n    const id = this.automationId || String(Date.now());\n    this.hass!.callApi(\n      \"POST\",\n      \"config/automation/config/\" + id,\n      this._config\n    ).then(\n      () => {\n        this._dirty = false;\n\n        if (!this.automationId) {\n          navigate(`/config/automation/edit/${id}`, { replace: true });\n        }\n      },\n      (errors) => {\n        this._errors = errors.body.message || errors.error || errors.body;\n        showToast(this, {\n          message: errors.body.message || errors.error || errors.body,\n        });\n        throw errors;\n      }\n    );\n  }\n\n  private _subscribeAutomationConfig(ev) {\n    const id = this._configSubscriptionsId++;\n    this._configSubscriptions[id] = ev.detail.callback;\n    ev.detail.unsub = () => {\n      delete this._configSubscriptions[id];\n    };\n    ev.detail.callback(this._config);\n  }\n\n  protected handleKeyboardSave() {\n    this._saveAutomation();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card {\n          overflow: hidden;\n        }\n        .errors {\n          padding: 20px;\n          font-weight: bold;\n          color: var(--error-color);\n        }\n        .content {\n          padding-bottom: 20px;\n        }\n        .yaml-mode {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n          padding-bottom: 0;\n        }\n        ha-yaml-editor {\n          flex-grow: 1;\n          --code-mirror-height: 100%;\n          min-height: 0;\n        }\n        .yaml-mode ha-card {\n          overflow: initial;\n          --ha-card-border-radius: 0;\n          border-bottom: 1px solid var(--divider-color);\n        }\n        p {\n          margin-bottom: 0;\n        }\n        ha-entity-toggle {\n          margin-right: 8px;\n        }\n        ha-fab {\n          position: relative;\n          bottom: calc(-80px - env(safe-area-inset-bottom));\n          transition: bottom 0.3s;\n        }\n        ha-fab.dirty {\n          bottom: 0;\n        }\n        .selected_menu_item {\n          color: var(--primary-color);\n        }\n        li[role=\"separator\"] {\n          border-bottom-color: var(--divider-color);\n        }\n      `,\n    ];\n  }\n}\n\ncustomElements.define(\"ha-automation-editor\", HaAutomationEditor);\n","import {\n  mdiHelpCircle,\n  mdiHistory,\n  mdiInformationOutline,\n  mdiPencil,\n  mdiPencilOff,\n  mdiPlayCircleOutline,\n  mdiPlus,\n} from \"@mdi/js\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { formatDateTime } from \"../../../common/datetime/format_date_time\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { navigate } from \"../../../common/navigate\";\nimport { DataTableColumnContainer } from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/entity/ha-entity-toggle\";\nimport \"../../../components/ha-button-related-filter-menu\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-icon-overflow-menu\";\nimport {\n  AutomationEntity,\n  triggerAutomationActions,\n} from \"../../../data/automation\";\nimport { UNAVAILABLE_STATES } from \"../../../data/entity\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { configSections } from \"../ha-panel-config\";\nimport { showNewAutomationDialog } from \"./show-dialog-new-automation\";\n\n@customElement(\"ha-automation-picker\")\nclass HaAutomationPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @property() public automations!: AutomationEntity[];\n\n  @property() private _activeFilters?: string[];\n\n  @state() private _filteredAutomations?: string[] | null;\n\n  @state() private _filterValue?;\n\n  private _automations = memoizeOne(\n    (\n      automations: AutomationEntity[],\n      filteredAutomations?: string[] | null\n    ) => {\n      if (filteredAutomations === null) {\n        return [];\n      }\n      return (\n        filteredAutomations\n          ? automations.filter((automation) =>\n              filteredAutomations!.includes(automation.entity_id)\n            )\n          : automations\n      ).map((automation) => ({\n        ...automation,\n        name: computeStateName(automation),\n        last_triggered: automation.attributes.last_triggered || undefined,\n      }));\n    }\n  );\n\n  private _columns = memoizeOne(\n    (narrow: boolean, _locale): DataTableColumnContainer => {\n      const columns: DataTableColumnContainer = {\n        toggle: {\n          title: \"\",\n          label: this.hass.localize(\n            \"ui.panel.config.automation.picker.headers.toggle\"\n          ),\n          type: \"icon\",\n          template: (_toggle, automation: any) =>\n            html`\n              <ha-entity-toggle\n                .hass=${this.hass}\n                .stateObj=${automation}\n              ></ha-entity-toggle>\n            `,\n        },\n        name: {\n          title: this.hass.localize(\n            \"ui.panel.config.automation.picker.headers.name\"\n          ),\n          sortable: true,\n          filterable: true,\n          direction: \"asc\",\n          grows: true,\n          template: narrow\n            ? (name, automation: any) =>\n                html`\n                  ${name}\n                  <div class=\"secondary\">\n                    ${this.hass.localize(\"ui.card.automation.last_triggered\")}:\n                    ${automation.attributes.last_triggered\n                      ? formatDateTime(\n                          new Date(automation.attributes.last_triggered),\n                          this.hass.locale\n                        )\n                      : this.hass.localize(\"ui.components.relative_time.never\")}\n                  </div>\n                `\n            : undefined,\n        },\n      };\n      if (!narrow) {\n        columns.last_triggered = {\n          sortable: true,\n          width: \"20%\",\n          title: this.hass.localize(\"ui.card.automation.last_triggered\"),\n          template: (last_triggered) => html`\n            ${last_triggered\n              ? formatDateTime(new Date(last_triggered), this.hass.locale)\n              : this.hass.localize(\"ui.components.relative_time.never\")}\n          `,\n        };\n        columns.trigger = {\n          label: this.hass.localize(\n            \"ui.panel.config.automation.picker.headers.trigger\"\n          ),\n          title: html`\n            <mwc-button style=\"visibility: hidden\">\n              ${this.hass.localize(\"ui.card.automation.trigger\")}\n            </mwc-button>\n          `,\n          width: \"20%\",\n          template: (_info, automation: any) => html`\n            <mwc-button\n              .automation=${automation}\n              @click=${this._triggerRunActions}\n              .disabled=${UNAVAILABLE_STATES.includes(automation.state)}\n            >\n              ${this.hass.localize(\"ui.card.automation.trigger\")}\n            </mwc-button>\n          `,\n        };\n      }\n      columns.actions = {\n        title: \"\",\n        label: this.hass.localize(\n          \"ui.panel.config.automation.picker.headers.actions\"\n        ),\n        type: \"overflow-menu\",\n        template: (_info, automation: any) => html`\n          <ha-icon-overflow-menu\n            .hass=${this.hass}\n            .narrow=${this.narrow}\n            .items=${[\n              // Info Button\n              {\n                path: mdiInformationOutline,\n                label: this.hass.localize(\n                  \"ui.panel.config.automation.picker.show_info_automation\"\n                ),\n                action: () => this._showInfo(automation),\n              },\n              // Trigger Button\n              {\n                path: mdiPlayCircleOutline,\n                label: this.hass.localize(\"ui.card.automation.trigger\"),\n                narrowOnly: true,\n                action: () => this._runActions(automation),\n              },\n              // Trace Button\n              {\n                path: mdiHistory,\n                disabled: !automation.attributes.id,\n                label: this.hass.localize(\n                  \"ui.panel.config.automation.picker.dev_automation\"\n                ),\n                tooltip: !automation.attributes.id\n                  ? this.hass.localize(\n                      \"ui.panel.config.automation.picker.dev_only_editable\"\n                    )\n                  : \"\",\n                action: () => {\n                  if (automation.attributes.id) {\n                    navigate(\n                      `/config/automation/trace/${automation.attributes.id}`\n                    );\n                  }\n                },\n              },\n              // Edit Button\n              {\n                path: automation.attributes.id ? mdiPencil : mdiPencilOff,\n                disabled: !automation.attributes.id,\n                label: this.hass.localize(\n                  \"ui.panel.config.automation.picker.edit_automation\"\n                ),\n                tooltip: !automation.attributes.id\n                  ? this.hass.localize(\n                      \"ui.panel.config.automation.picker.dev_only_editable\"\n                    )\n                  : \"\",\n                action: () => {\n                  if (automation.attributes.id) {\n                    navigate(\n                      `/config/automation/edit/${automation.attributes.id}`\n                    );\n                  }\n                },\n              },\n            ]}\n            style=\"color: var(--secondary-text-color)\"\n          >\n          </ha-icon-overflow-menu>\n        `,\n      };\n      return columns;\n    }\n  );\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        id=\"entity_id\"\n        .route=${this.route}\n        .tabs=${configSections.automations}\n        .activeFilters=${this._activeFilters}\n        .columns=${this._columns(this.narrow, this.hass.locale)}\n        .data=${this._automations(this.automations, this._filteredAutomations)}\n        .noDataText=${this.hass.localize(\n          \"ui.panel.config.automation.picker.no_automations\"\n        )}\n        @clear-filter=${this._clearFilter}\n        hasFab\n      >\n        <ha-icon-button\n          slot=\"toolbar-icon\"\n          .label=${this.hass.localize(\"ui.common.help\")}\n          .path=${mdiHelpCircle}\n          @click=${this._showHelp}\n        ></ha-icon-button>\n        <ha-button-related-filter-menu\n          slot=\"filter-menu\"\n          corner=\"BOTTOM_START\"\n          .narrow=${this.narrow}\n          .hass=${this.hass}\n          .value=${this._filterValue}\n          exclude-domains='[\"automation\"]'\n          @related-changed=${this._relatedFilterChanged}\n        >\n        </ha-button-related-filter-menu>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.picker.add_automation\"\n          )}\n          extended\n          @click=${this._createNew}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private _relatedFilterChanged(ev: CustomEvent) {\n    this._filterValue = ev.detail.value;\n    if (!this._filterValue) {\n      this._clearFilter();\n      return;\n    }\n    this._activeFilters = [ev.detail.filter];\n    this._filteredAutomations = ev.detail.items.automation || null;\n  }\n\n  private _clearFilter() {\n    this._filteredAutomations = undefined;\n    this._activeFilters = undefined;\n    this._filterValue = undefined;\n  }\n\n  private _showInfo(automation: AutomationEntity) {\n    const entityId = automation.entity_id;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private _showHelp() {\n    showAlertDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.automation.caption\"),\n      text: html`\n        ${this.hass.localize(\"ui.panel.config.automation.picker.introduction\")}\n        <p>\n          <a\n            href=${documentationUrl(this.hass, \"/docs/automation/editor/\")}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            ${this.hass.localize(\n              \"ui.panel.config.automation.picker.learn_more\"\n            )}\n          </a>\n        </p>\n      `,\n    });\n  }\n\n  private _triggerRunActions = (ev) => {\n    this._runActions(ev.currentTarget.automation);\n  };\n\n  private _runActions = (automation: AutomationEntity) => {\n    triggerAutomationActions(this.hass, automation.entity_id);\n  };\n\n  private _createNew() {\n    if (isComponentLoaded(this.hass, \"blueprint\")) {\n      showNewAutomationDialog(this);\n    } else {\n      navigate(\"/config/automation/edit/new\");\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-picker\": HaAutomationPicker;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/entity/ha-entity-toggle\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-textarea\";\nimport \"../../../components/ha-textfield\";\nimport {\n  AUTOMATION_DEFAULT_MODE,\n  Condition,\n  ManualAutomationConfig,\n  Trigger,\n  triggerAutomationActions,\n} from \"../../../data/automation\";\nimport { Action, MODES, MODES_MAX } from \"../../../data/script\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport \"../ha-config-section\";\nimport \"./action/ha-automation-action\";\nimport \"./condition/ha-automation-condition\";\nimport \"./trigger/ha-automation-trigger\";\n\n@customElement(\"manual-automation-editor\")\nexport class HaManualAutomationEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public isWide!: boolean;\n\n  @property() public narrow!: boolean;\n\n  @property() public config!: ManualAutomationConfig;\n\n  @property() public stateObj?: HassEntity;\n\n  @state() private _showDescription = false;\n\n  protected render() {\n    return html`<ha-config-section vertical .isWide=${this.isWide}>\n        ${!this.narrow\n          ? html`<span slot=\"header\">${this.config.alias}</span>`\n          : \"\"}\n        <span slot=\"introduction\">\n          ${this.hass.localize(\n            \"ui.panel.config.automation.editor.introduction\"\n          )}\n        </span>\n        <ha-card outlined>\n          <div class=\"card-content\">\n            <ha-textfield\n              .label=${this.hass.localize(\n                \"ui.panel.config.automation.editor.alias\"\n              )}\n              name=\"alias\"\n              .value=${this.config.alias || \"\"}\n              @change=${this._valueChanged}\n            >\n            </ha-textfield>\n            ${this._showDescription\n              ? html`\n                  <ha-textarea\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.automation.editor.description.label\"\n                    )}\n                    .placeholder=${this.hass.localize(\n                      \"ui.panel.config.automation.editor.description.placeholder\"\n                    )}\n                    name=\"description\"\n                    autogrow\n                    .value=${this.config.description || \"\"}\n                    @change=${this._valueChanged}\n                  ></ha-textarea>\n                `\n              : html`\n                  <div class=\"link-button-row\">\n                    <button class=\"link\" @click=${this._addDescription}>\n                      ${this.hass.localize(\n                        \"ui.panel.config.automation.editor.description.add\"\n                      )}\n                    </button>\n                  </div>\n                `}\n            <p>\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.modes.description\",\n                \"documentation_link\",\n                html`<a\n                  href=${documentationUrl(this.hass, \"/docs/automation/modes/\")}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  >${this.hass.localize(\n                    \"ui.panel.config.automation.editor.modes.documentation\"\n                  )}</a\n                >`\n              )}\n            </p>\n            <ha-select\n              .label=${this.hass.localize(\n                \"ui.panel.config.automation.editor.modes.label\"\n              )}\n              .value=${this.config.mode || AUTOMATION_DEFAULT_MODE}\n              @selected=${this._modeChanged}\n              fixedMenuPosition\n            >\n              ${MODES.map(\n                (mode) => html`\n                  <mwc-list-item .value=${mode}>\n                    ${this.hass.localize(\n                      `ui.panel.config.automation.editor.modes.${mode}`\n                    ) || mode}\n                  </mwc-list-item>\n                `\n              )}\n            </ha-select>\n            ${this.config.mode && MODES_MAX.includes(this.config.mode)\n              ? html`\n                  <br /><ha-textfield\n                    .label=${this.hass.localize(\n                      `ui.panel.config.automation.editor.max.${this.config.mode}`\n                    )}\n                    type=\"number\"\n                    name=\"max\"\n                    .value=${this.config.max || \"10\"}\n                    @change=${this._valueChanged}\n                    class=\"max\"\n                  >\n                  </ha-textfield>\n                `\n              : html``}\n          </div>\n          ${this.stateObj\n            ? html`\n                <div class=\"card-actions layout horizontal justified center\">\n                  <div class=\"layout horizontal center\">\n                    <ha-entity-toggle\n                      .hass=${this.hass}\n                      .stateObj=${this.stateObj!}\n                    ></ha-entity-toggle>\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.enable_disable\"\n                    )}\n                  </div>\n                  <div>\n                    <a href=\"/config/automation/trace/${this.config.id}\">\n                      <mwc-button>\n                        ${this.hass.localize(\n                          \"ui.panel.config.automation.editor.show_trace\"\n                        )}\n                      </mwc-button>\n                    </a>\n                    <mwc-button\n                      @click=${this._runActions}\n                      .stateObj=${this.stateObj}\n                    >\n                      ${this.hass.localize(\"ui.card.automation.trigger\")}\n                    </mwc-button>\n                  </div>\n                </div>\n              `\n            : \"\"}\n        </ha-card>\n      </ha-config-section>\n\n      <ha-config-section vertical .isWide=${this.isWide}>\n        <span slot=\"header\">\n          ${this.hass.localize(\n            \"ui.panel.config.automation.editor.triggers.header\"\n          )}\n        </span>\n        <span slot=\"introduction\">\n          <p>\n            ${this.hass.localize(\n              \"ui.panel.config.automation.editor.triggers.introduction\"\n            )}\n          </p>\n          <a\n            href=${documentationUrl(this.hass, \"/docs/automation/trigger/\")}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            ${this.hass.localize(\n              \"ui.panel.config.automation.editor.triggers.learn_more\"\n            )}\n          </a>\n        </span>\n        <ha-automation-trigger\n          .triggers=${this.config.trigger}\n          @value-changed=${this._triggerChanged}\n          .hass=${this.hass}\n        ></ha-automation-trigger>\n      </ha-config-section>\n\n      <ha-config-section vertical .isWide=${this.isWide}>\n        <span slot=\"header\">\n          ${this.hass.localize(\n            \"ui.panel.config.automation.editor.conditions.header\"\n          )}\n        </span>\n        <span slot=\"introduction\">\n          <p>\n            ${this.hass.localize(\n              \"ui.panel.config.automation.editor.conditions.introduction\"\n            )}\n          </p>\n          <a\n            href=${documentationUrl(this.hass, \"/docs/scripts/conditions/\")}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            ${this.hass.localize(\n              \"ui.panel.config.automation.editor.conditions.learn_more\"\n            )}\n          </a>\n        </span>\n        <ha-automation-condition\n          .conditions=${this.config.condition || []}\n          @value-changed=${this._conditionChanged}\n          .hass=${this.hass}\n        ></ha-automation-condition>\n      </ha-config-section>\n\n      <ha-config-section vertical .isWide=${this.isWide}>\n        <span slot=\"header\">\n          ${this.hass.localize(\n            \"ui.panel.config.automation.editor.actions.header\"\n          )}\n        </span>\n        <span slot=\"introduction\">\n          <p>\n            ${this.hass.localize(\n              \"ui.panel.config.automation.editor.actions.introduction\"\n            )}\n          </p>\n          <a\n            href=${documentationUrl(this.hass, \"/docs/automation/action/\")}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            ${this.hass.localize(\n              \"ui.panel.config.automation.editor.actions.learn_more\"\n            )}\n          </a>\n        </span>\n        <ha-automation-action\n          .actions=${this.config.action}\n          @value-changed=${this._actionChanged}\n          .hass=${this.hass}\n          .narrow=${this.narrow}\n        ></ha-automation-action>\n      </ha-config-section>`;\n  }\n\n  protected willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (\n      !this._showDescription &&\n      changedProps.has(\"config\") &&\n      this.config.description\n    ) {\n      this._showDescription = true;\n    }\n  }\n\n  private _runActions(ev: Event) {\n    triggerAutomationActions(this.hass, (ev.target as any).stateObj.entity_id);\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const target = ev.target as any;\n    const name = target.name;\n    if (!name) {\n      return;\n    }\n    let newVal = target.value;\n    if (target.type === \"number\") {\n      newVal = Number(newVal);\n    }\n    if ((this.config![name] || \"\") === newVal) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.config!, [name]: newVal },\n    });\n  }\n\n  private _modeChanged(ev) {\n    const mode = ev.target.value;\n\n    if (\n      mode === this.config!.mode ||\n      (!this.config!.mode && mode === MODES[0])\n    ) {\n      return;\n    }\n    const value = {\n      ...this.config!,\n      mode,\n    };\n\n    if (!MODES_MAX.includes(mode)) {\n      delete value.max;\n    }\n\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n\n  private _triggerChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.config!, trigger: ev.detail.value as Trigger[] },\n    });\n  }\n\n  private _conditionChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.config!,\n        condition: ev.detail.value as Condition[],\n      },\n    });\n  }\n\n  private _actionChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.config!, action: ev.detail.value as Action[] },\n    });\n  }\n\n  private _addDescription() {\n    this._showDescription = true;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card {\n          overflow: hidden;\n        }\n        .link-button-row {\n          padding: 14px;\n        }\n        ha-textarea,\n        ha-textfield {\n          display: block;\n        }\n        span[slot=\"introduction\"] a {\n          color: var(--primary-color);\n        }\n        p {\n          margin-bottom: 0;\n        }\n        ha-entity-toggle {\n          margin-right: 8px;\n        }\n        ha-select,\n        .max {\n          margin-top: 16px;\n          width: 200px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"manual-automation-editor\": HaManualAutomationEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}