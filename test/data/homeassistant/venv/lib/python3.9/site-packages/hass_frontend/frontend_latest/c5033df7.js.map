{"version":3,"file":"c5033df7.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AA+GA;AClGA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;ACFA;AACA;;;AAgCA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAEA;;AAEA;AAGA;;AAEA;;AAxDA;;;;;;;;;;AAAA;;ACZA;;;;;;;;;;;;;;;;;;;;AANA;;;;ACkDA;;AAEA;;;;AAsBA;;AAEA;AAiCA;AAIA;;;;AAkBA;;AAEA;;;;AAsBA;;AAEA;ACwFA;;AAGA;AAGA;AAIA;AAGA;;;AAKA;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AAGA;;AAEA;;AAGA;AAGA;;;AAGA;AACA;;;AAGA;AAMA;AACA;;;AAIA;AAIA;AAMA;AACA;;;;AAKA;AAEA;;AAOA;AAGA;;;AAGA;AACA;;AAEA;AAEA;;;AAIA;AAEA;AAEA;;;AAKA;AACA;;;;AAIA;;AAGA;;;;AAMA;;AAEA;;;AAKA;AAKA;AACA;;;AAIA;AAEA;;;AAIA;AACA;;AAEA;;;AAUA;;;AAIA;AACA;AAGA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;AAGA;;;AAIA;;;AAKA;;;AAKA;AACA;;;;AAIA;;AAGA;;;;AAMA;;;AAKA;;;;AAcA;;;;;AAOA;AACA;AAKA;;;;AAIA;;;;;AAOA;AACA;AAKA;;;;AAIA;;;;;AAOA;AACA;AAKA;;;;;AAKA;;AAGA;;AAIA;;AAIA;;AAIA;AAEA;;AAGA;;;AAKA;AACA;AACA;AACA;AAGA;;;AAGA;AAGA;AAEA;AACA;;AAIA;;AAGA;;;;;;AAOA;AACA;;AAGA;;;AAGA;AACA;;AAEA;;;AAneA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;ACvCA;;AAIA;AACA;;;;;;AAMA;;;;;AAKA;;AAEA;;;AAIA;;AAIA;;AAEA;;;AAIA;AACA;AACA;;;;AAIA;;;;AAMA;;AAGA;AACA;;;;;;AAOA;;;;;AAKA;;AAnGA;AA8GA;AAOA;;AAIA;AAMA;;;AAGA;;;AAKA;;;AAIA;AACA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhJA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/iron-icon/iron-icon.js","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-icon-picker.ts","webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/show-dialog-options-flow.ts","webpack://home-assistant-frontend/./src/panels/config/entities/entity-registry-settings.ts","webpack://home-assistant-frontend/./src/panels/config/entities/dialog-entity-editor.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {IronMeta} from '@polymer/iron-meta/iron-meta.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {Base} from '@polymer/polymer/polymer-legacy.js';\n\n/**\n\nThe `iron-icon` element displays an icon. By default an icon renders as a 24px\nsquare.\n\nExample using src:\n\n    <iron-icon src=\"star.png\"></iron-icon>\n\nExample setting size to 32px x 32px:\n\n    <iron-icon class=\"big\" src=\"big_star.png\"></iron-icon>\n\n    <style is=\"custom-style\">\n      .big {\n        --iron-icon-height: 32px;\n        --iron-icon-width: 32px;\n      }\n    </style>\n\nThe iron elements include several sets of icons. To use the default set of\nicons, import `iron-icons.js` and use the `icon` attribute to specify an icon:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/iron-icons.js\";\n    </script>\n\n    <iron-icon icon=\"menu\"></iron-icon>\n\nTo use a different built-in set of icons, import the specific\n`iron-icons/<iconset>-icons.js`, and specify the icon as `<iconset>:<icon>`.\nFor example, to use a communication icon, you would use:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/communication-icons.js\";\n    </script>\n\n    <iron-icon icon=\"communication:email\"></iron-icon>\n\nYou can also create custom icon sets of bitmap or SVG icons.\n\nExample of using an icon named `cherry` from a custom iconset with the ID\n`fruit`:\n\n    <iron-icon icon=\"fruit:cherry\"></iron-icon>\n\nSee `<iron-iconset>` and `<iron-iconset-svg>` for more information about how to\ncreate a custom iconset.\n\nSee the `iron-icons` demo to see the icons available in the various iconsets.\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-icon` | Mixin applied to the icon | {}\n`--iron-icon-width` | Width of the icon | `24px`\n`--iron-icon-height` | Height of the icon | `24px`\n`--iron-icon-fill-color` | Fill color of the svg icon | `currentcolor`\n`--iron-icon-stroke-color` | Stroke color of the svg icon | none\n\n@group Iron Elements\n@element iron-icon\n@demo demo/index.html\n@hero hero.svg\n@homepage polymer.github.io\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        @apply --layout-inline;\n        @apply --layout-center-center;\n        position: relative;\n\n        vertical-align: middle;\n\n        fill: var(--iron-icon-fill-color, currentcolor);\n        stroke: var(--iron-icon-stroke-color, none);\n\n        width: var(--iron-icon-width, 24px);\n        height: var(--iron-icon-height, 24px);\n        @apply --iron-icon;\n      }\n\n      :host([hidden]) {\n        display: none;\n      }\n    </style>\n`,\n\n  is: 'iron-icon',\n\n  properties: {\n\n    /**\n     * The name of the icon to use. The name should be of the form:\n     * `iconset_name:icon_name`.\n     */\n    icon: {type: String},\n\n    /**\n     * The name of the theme to used, if one is specified by the\n     * iconset.\n     */\n    theme: {type: String},\n\n    /**\n     * If using iron-icon without an iconset, you can set the src to be\n     * the URL of an individual icon image file. Note that this will take\n     * precedence over a given icon attribute.\n     */\n    src: {type: String},\n\n    /**\n     * @type {!IronMeta}\n     */\n    _meta: {value: Base.create('iron-meta', {type: 'iconset'})}\n\n  },\n\n  observers: [\n    '_updateIcon(_meta, isAttached)',\n    '_updateIcon(theme, isAttached)',\n    '_srcChanged(src, isAttached)',\n    '_iconChanged(icon, isAttached)'\n  ],\n\n  _DEFAULT_ICONSET: 'icons',\n\n  _iconChanged: function(icon) {\n    var parts = (icon || '').split(':');\n    this._iconName = parts.pop();\n    this._iconsetName = parts.pop() || this._DEFAULT_ICONSET;\n    this._updateIcon();\n  },\n\n  _srcChanged: function(src) {\n    this._updateIcon();\n  },\n\n  _usesIconset: function() {\n    return this.icon || !this.src;\n  },\n\n  /** @suppress {visibility} */\n  _updateIcon: function() {\n    if (this._usesIconset()) {\n      if (this._img && this._img.parentNode) {\n        dom(this.root).removeChild(this._img);\n      }\n      if (this._iconName === '') {\n        if (this._iconset) {\n          this._iconset.removeIcon(this);\n        }\n      } else if (this._iconsetName && this._meta) {\n        this._iconset = /** @type {?Polymer.Iconset} */ (\n            this._meta.byKey(this._iconsetName));\n        if (this._iconset) {\n          this._iconset.applyIcon(this, this._iconName, this.theme);\n          this.unlisten(window, 'iron-iconset-added', '_updateIcon');\n        } else {\n          this.listen(window, 'iron-iconset-added', '_updateIcon');\n        }\n      }\n    } else {\n      if (this._iconset) {\n        this._iconset.removeIcon(this);\n      }\n      if (!this._img) {\n        this._img = document.createElement('img');\n        this._img.style.width = '100%';\n        this._img.style.height = '100%';\n        this._img.draggable = false;\n      }\n      this._img.src = this.src;\n      dom(this.root).appendChild(this._img);\n    }\n  }\n});\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 8px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 20px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 20px 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 20px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(\n          --ha-dialog-border-radius,\n          var(--ha-card-border-radius, 4px)\n        );\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 40px;\n        margin-inline-end: 40px;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { ComboBoxLitRenderer } from \"lit-vaadin-helpers\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { customIcons } from \"../data/custom_icons\";\nimport { PolymerChangedEvent } from \"../polymer-types\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-combo-box\";\nimport type { HaComboBox } from \"./ha-combo-box\";\nimport \"./ha-icon\";\n\ntype IconItem = {\n  icon: string;\n  keywords: string[];\n};\nlet iconItems: IconItem[] = [];\n\n// eslint-disable-next-line lit/prefer-static-styles\nconst rowRenderer: ComboBoxLitRenderer<IconItem> = (item) => html`<mwc-list-item\n  graphic=\"avatar\"\n>\n  <ha-icon .icon=${item.icon} slot=\"graphic\"></ha-icon>\n  ${item.icon}\n</mwc-list-item>`;\n\n@customElement(\"ha-icon-picker\")\nexport class HaIconPicker extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property() public fallbackPath?: string;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ type: Boolean }) public invalid = false;\n\n  @state() private _opened = false;\n\n  @query(\"ha-combo-box\", true) private comboBox!: HaComboBox;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        item-value-path=\"icon\"\n        item-label-path=\"icon\"\n        .value=${this._value}\n        allow-custom-value\n        .filteredItems=${iconItems}\n        .label=${this.label}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        .placeholder=${this.placeholder}\n        .errorMessage=${this.errorMessage}\n        .invalid=${this.invalid}\n        .renderer=${rowRenderer}\n        icon\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n        @filter-changed=${this._filterChanged}\n      >\n        ${this._value || this.placeholder\n          ? html`\n              <ha-icon .icon=${this._value || this.placeholder} slot=\"icon\">\n              </ha-icon>\n            `\n          : this.fallbackPath\n          ? html`<ha-svg-icon\n              .path=${this.fallbackPath}\n              slot=\"icon\"\n            ></ha-svg-icon>`\n          : \"\"}\n      </ha-combo-box>\n    `;\n  }\n\n  private async _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n    if (this._opened && !iconItems.length) {\n      const iconList = await import(\"../../build/mdi/iconList.json\");\n\n      iconItems = iconList.default.map((icon) => ({\n        icon: `mdi:${icon.name}`,\n        keywords: icon.keywords,\n      }));\n\n      (this.comboBox as any).filteredItems = iconItems;\n\n      Object.keys(customIcons).forEach((iconSet) => {\n        this._loadCustomIconItems(iconSet);\n      });\n    }\n  }\n\n  private async _loadCustomIconItems(iconsetPrefix: string) {\n    try {\n      const getIconList = customIcons[iconsetPrefix].getIconList;\n      if (typeof getIconList !== \"function\") {\n        return;\n      }\n      const iconList = await getIconList();\n      const customIconItems = iconList.map((icon) => ({\n        icon: `${iconsetPrefix}:${icon.name}`,\n        keywords: icon.keywords ?? [],\n      }));\n      iconItems.push(...customIconItems);\n      (this.comboBox as any).filteredItems = iconItems;\n    } catch (e) {\n      // eslint-disable-next-line\n      console.warn(`Unable to load icon list for ${iconsetPrefix} iconset`);\n    }\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    this._setValue(ev.detail.value);\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    fireEvent(\n      this,\n      \"value-changed\",\n      { value: this._value },\n      {\n        bubbles: false,\n        composed: false,\n      }\n    );\n  }\n\n  private _filterChanged(ev: CustomEvent): void {\n    const filterString = ev.detail.value.toLowerCase();\n    const characterCount = filterString.length;\n    if (characterCount >= 2) {\n      const filteredItems: IconItem[] = [];\n      const filteredItemsByKeywords: IconItem[] = [];\n\n      iconItems.forEach((item) => {\n        if (item.icon.includes(filterString)) {\n          filteredItems.push(item);\n          return;\n        }\n        if (item.keywords.some((t) => t.includes(filterString))) {\n          filteredItemsByKeywords.push(item);\n        }\n      });\n\n      filteredItems.push(...filteredItemsByKeywords);\n\n      if (filteredItems.length > 0) {\n        (this.comboBox as any).filteredItems = filteredItems;\n      } else {\n        (this.comboBox as any).filteredItems = [\n          { icon: filterString, keywords: [] },\n        ];\n      }\n    } else {\n      (this.comboBox as any).filteredItems = iconItems;\n    }\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  static get styles() {\n    return css`\n      ha-icon,\n      ha-svg-icon {\n        color: var(--primary-text-color);\n        position: relative;\n        bottom: 2px;\n      }\n      *[slot=\"prefix\"] {\n        margin-right: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-picker\": HaIconPicker;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import { html } from \"lit\";\nimport { ConfigEntry } from \"../../data/config_entries\";\nimport { domainToName, IntegrationManifest } from \"../../data/integration\";\nimport {\n  createOptionsFlow,\n  deleteOptionsFlow,\n  fetchOptionsFlow,\n  handleOptionsFlowStep,\n} from \"../../data/options_flow\";\nimport {\n  loadDataEntryFlowDialog,\n  showFlowDialog,\n} from \"./show-dialog-data-entry-flow\";\n\nexport const loadOptionsFlowDialog = loadDataEntryFlowDialog;\n\nexport const showOptionsFlowDialog = (\n  element: HTMLElement,\n  configEntry: ConfigEntry,\n  manifest?: IntegrationManifest | null\n): void =>\n  showFlowDialog(\n    element,\n    {\n      startFlowHandler: configEntry.entry_id,\n      domain: configEntry.domain,\n      manifest,\n    },\n    {\n      loadDevicesAndAreas: false,\n      createFlow: async (hass, handler) => {\n        const [step] = await Promise.all([\n          createOptionsFlow(hass, handler),\n          hass.loadBackendTranslation(\"options\", configEntry.domain),\n        ]);\n        return step;\n      },\n      fetchFlow: async (hass, flowId) => {\n        const [step] = await Promise.all([\n          fetchOptionsFlow(hass, flowId),\n          hass.loadBackendTranslation(\"options\", configEntry.domain),\n        ]);\n        return step;\n      },\n      handleFlowStep: handleOptionsFlowStep,\n      deleteFlow: deleteOptionsFlow,\n\n      renderAbortDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.abort.${step.reason}`,\n          step.description_placeholders\n        );\n\n        return description\n          ? html`\n              <ha-markdown\n                breaks\n                allowsvg\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderShowFormStepHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`ui.dialogs.options_flow.form.header`)\n        );\n      },\n\n      renderShowFormStepDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.description`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderShowFormStepFieldLabel(hass, step, field) {\n        return hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.data.${field.name}`\n        );\n      },\n\n      renderShowFormStepFieldHelper(hass, step, field) {\n        return hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.data_description.${field.name}`\n        );\n      },\n\n      renderShowFormStepFieldError(hass, step, error) {\n        return hass.localize(\n          `component.${configEntry.domain}.options.error.${error}`,\n          step.description_placeholders\n        );\n      },\n\n      renderExternalStepHeader(_hass, _step) {\n        return \"\";\n      },\n\n      renderExternalStepDescription(_hass, _step) {\n        return \"\";\n      },\n\n      renderCreateEntryDescription(hass, _step) {\n        return html`\n          <p>${hass.localize(`ui.dialogs.options_flow.success.description`)}</p>\n        `;\n      },\n\n      renderShowFormProgressHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`component.${configEntry.domain}.title`)\n        );\n      },\n\n      renderShowFormProgressDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.progress.${step.progress_action}`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderMenuHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`component.${configEntry.domain}.title`)\n        );\n      },\n\n      renderMenuDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.description`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderMenuOption(hass, step, option) {\n        return hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.menu_options.${option}`,\n          step.description_placeholders\n        );\n      },\n\n      renderLoadingDescription(hass, reason) {\n        return (\n          hass.localize(`component.${configEntry.domain}.options.loading`) ||\n          hass.localize(`ui.dialogs.options_flow.loading.${reason}`, {\n            integration: domainToName(hass.localize, configEntry.domain),\n          })\n        );\n      },\n    }\n  );\n","import \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-formfield/mwc-formfield\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { domainIcon } from \"../../../common/entity/domain_icon\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport { LocalizeFunc } from \"../../../common/translations/localize\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-area-picker\";\nimport \"../../../components/ha-expansion-panel\";\nimport \"../../../components/ha-icon-picker\";\nimport \"../../../components/ha-radio\";\nimport \"../../../components/ha-select\";\nimport \"../../../components/ha-settings-row\";\nimport \"../../../components/ha-switch\";\nimport type { HaSwitch } from \"../../../components/ha-switch\";\nimport \"../../../components/ha-textfield\";\nimport {\n  CameraPreferences,\n  CAMERA_SUPPORT_STREAM,\n  fetchCameraPrefs,\n  STREAM_TYPE_HLS,\n  updateCameraPrefs,\n} from \"../../../data/camera\";\nimport {\n  ConfigEntry,\n  deleteConfigEntry,\n  getConfigEntries,\n} from \"../../../data/config_entries\";\nimport {\n  createConfigFlow,\n  handleConfigFlowStep,\n} from \"../../../data/config_flow\";\nimport { DataEntryFlowStepCreateEntry } from \"../../../data/data_entry_flow\";\nimport {\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n  updateDeviceRegistryEntry,\n} from \"../../../data/device_registry\";\nimport {\n  EntityRegistryEntryUpdateParams,\n  ExtEntityRegistryEntry,\n  fetchEntityRegistry,\n  removeEntityRegistryEntry,\n  updateEntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport { domainToName } from \"../../../data/integration\";\nimport { showOptionsFlowDialog } from \"../../../dialogs/config-flow/show-dialog-options-flow\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { showDeviceRegistryDetailDialog } from \"../devices/device-registry-detail/show-dialog-device-registry-detail\";\nimport { showEntityEditorDialog } from \"./show-dialog-entity-editor\";\n\nconst OVERRIDE_DEVICE_CLASSES = {\n  cover: [\n    [\n      \"awning\",\n      \"blind\",\n      \"curtain\",\n      \"damper\",\n      \"door\",\n      \"garage\",\n      \"gate\",\n      \"shade\",\n      \"shutter\",\n      \"window\",\n    ],\n  ],\n  binary_sensor: [\n    [\"lock\"], // Lock\n    [\"window\", \"door\", \"garage_door\", \"opening\"], // Door\n    [\"battery\", \"battery_charging\"], // Battery\n    [\"cold\", \"gas\", \"heat\"], // Climate\n    [\"running\", \"motion\", \"moving\", \"occupancy\", \"presence\", \"vibration\"], // Presence\n    [\"power\", \"plug\", \"light\"], // Power\n    [\n      \"smoke\",\n      \"safety\",\n      \"sound\",\n      \"problem\",\n      \"tamper\",\n      \"carbon_monoxide\",\n      \"moisture\",\n    ], // Alarm\n  ],\n};\n\nconst OVERRIDE_SENSOR_UNITS = {\n  temperature: [\"°C\", \"°F\", \"K\"],\n  pressure: [\"hPa\", \"Pa\", \"kPa\", \"bar\", \"cbar\", \"mbar\", \"mmHg\", \"inHg\", \"psi\"],\n};\n\nconst SWITCH_AS_DOMAINS = [\"cover\", \"fan\", \"light\", \"lock\", \"siren\"];\n\n@customElement(\"entity-registry-settings\")\nexport class EntityRegistrySettings extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entry!: ExtEntityRegistryEntry;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _entityId!: string;\n\n  @state() private _deviceClass?: string;\n\n  @state() private _switchAs = \"switch\";\n\n  @state() private _areaId?: string | null;\n\n  @state() private _disabledBy!: string | null;\n\n  @state() private _hiddenBy!: string | null;\n\n  @state() private _device?: DeviceRegistryEntry;\n\n  @state() private _helperConfigEntry?: ConfigEntry;\n\n  @state() private _unit_of_measurement?: string | null;\n\n  @state() private _error?: string;\n\n  @state() private _submitting?: boolean;\n\n  @state() private _cameraPrefs?: CameraPreferences;\n\n  private _origEntityId!: string;\n\n  private _deviceLookup?: Record<string, DeviceRegistryEntry>;\n\n  private _deviceClassOptions?: string[][];\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        this._deviceLookup = {};\n        for (const device of devices) {\n          this._deviceLookup[device.id] = device;\n        }\n        if (this.entry.device_id) {\n          this._device = this._deviceLookup[this.entry.device_id];\n        }\n      }),\n    ];\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    if (this.entry.config_entry_id) {\n      getConfigEntries(this.hass, {\n        type: \"helper\",\n        domain: this.entry.platform,\n      }).then((entries) => {\n        this._helperConfigEntry = entries.find(\n          (ent) => ent.entry_id === this.entry.config_entry_id\n        );\n      });\n    }\n  }\n\n  protected willUpdate(changedProperties: PropertyValues) {\n    super.willUpdate(changedProperties);\n    if (!changedProperties.has(\"entry\")) {\n      return;\n    }\n\n    this._error = undefined;\n    this._name = this.entry.name || \"\";\n    this._icon = this.entry.icon || \"\";\n    this._deviceClass =\n      this.entry.device_class || this.entry.original_device_class;\n    this._origEntityId = this.entry.entity_id;\n    this._areaId = this.entry.area_id;\n    this._entityId = this.entry.entity_id;\n    this._disabledBy = this.entry.disabled_by;\n    this._hiddenBy = this.entry.hidden_by;\n    this._device =\n      this.entry.device_id && this._deviceLookup\n        ? this._deviceLookup[this.entry.device_id]\n        : undefined;\n\n    const domain = computeDomain(this.entry.entity_id);\n\n    if (domain === \"camera\" && isComponentLoaded(this.hass, \"stream\")) {\n      const stateObj: HassEntity | undefined =\n        this.hass.states[this.entry.entity_id];\n      if (\n        stateObj &&\n        supportsFeature(stateObj, CAMERA_SUPPORT_STREAM) &&\n        // The stream component for HLS streams supports a server-side pre-load\n        // option that client initiated WebRTC streams do not\n        stateObj.attributes.frontend_stream_type === STREAM_TYPE_HLS\n      ) {\n        this._fetchCameraPrefs();\n      }\n    }\n\n    if (domain === \"sensor\") {\n      const stateObj: HassEntity | undefined =\n        this.hass.states[this.entry.entity_id];\n      this._unit_of_measurement = stateObj?.attributes?.unit_of_measurement;\n    }\n\n    const deviceClasses: string[][] = OVERRIDE_DEVICE_CLASSES[domain];\n\n    if (!deviceClasses) {\n      return;\n    }\n\n    this._deviceClassOptions = [[], []];\n    for (const deviceClass of deviceClasses) {\n      if (deviceClass.includes(this.entry.original_device_class!)) {\n        this._deviceClassOptions[0] = deviceClass;\n      } else {\n        this._deviceClassOptions[1].push(...deviceClass);\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (this.entry.entity_id !== this._origEntityId) {\n      return html``;\n    }\n    const stateObj: HassEntity | undefined =\n      this.hass.states[this.entry.entity_id];\n\n    const domain = computeDomain(this.entry.entity_id);\n\n    const invalidDomainUpdate = computeDomain(this._entityId.trim()) !== domain;\n\n    return html`\n      ${!stateObj\n        ? html`\n            <div class=\"container warning\">\n              ${this.hass!.localize(\n                \"ui.dialogs.entity_registry.editor.unavailable\"\n              )}\n              ${this._device?.disabled_by\n                ? html`<br />${this.hass!.localize(\n                      \"ui.dialogs.entity_registry.editor.device_disabled\"\n                    )}<br /><mwc-button @click=${this._openDeviceSettings}>\n                      ${this.hass!.localize(\n                        \"ui.dialogs.entity_registry.editor.open_device_settings\"\n                      )}\n                    </mwc-button>`\n                : \"\"}\n            </div>\n          `\n        : \"\"}\n      ${this._error\n        ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n        : \"\"}\n      <div class=\"form container\">\n        <ha-textfield\n          .value=${this._name}\n          .label=${this.hass.localize(\"ui.dialogs.entity_registry.editor.name\")}\n          .invalid=${invalidDomainUpdate}\n          .disabled=${this._submitting}\n          .placeholder=${this.entry.original_name}\n          @input=${this._nameChanged}\n        ></ha-textfield>\n        <ha-icon-picker\n          .value=${this._icon}\n          @value-changed=${this._iconChanged}\n          .label=${this.hass.localize(\"ui.dialogs.entity_registry.editor.icon\")}\n          .placeholder=${this.entry.original_icon || stateObj?.attributes.icon}\n          .fallbackPath=${!this._icon && !stateObj?.attributes.icon && stateObj\n            ? domainIcon(computeDomain(stateObj.entity_id), stateObj)\n            : undefined}\n          .disabled=${this._submitting}\n        ></ha-icon-picker>\n        ${this._deviceClassOptions\n          ? html`\n              <ha-select\n                .label=${this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.device_class\"\n                )}\n                .value=${this._deviceClass}\n                naturalMenuWidth\n                fixedMenuPosition\n                @selected=${this._deviceClassChanged}\n                @closed=${stopPropagation}\n              >\n                <mwc-list-item></mwc-list-item>\n                ${this._deviceClassesSorted(\n                  domain,\n                  this._deviceClassOptions[0],\n                  this.hass.localize\n                ).map(\n                  (entry) => html`\n                    <mwc-list-item .value=${entry.deviceClass}>\n                      ${entry.label}\n                    </mwc-list-item>\n                  `\n                )}\n                ${this._deviceClassOptions[0].length &&\n                this._deviceClassOptions[1].length\n                  ? html`<li divider role=\"separator\"></li>`\n                  : \"\"}\n                ${this._deviceClassesSorted(\n                  domain,\n                  this._deviceClassOptions[1],\n                  this.hass.localize\n                ).map(\n                  (entry) => html`\n                    <mwc-list-item .value=${entry.deviceClass}>\n                      ${entry.label}\n                    </mwc-list-item>\n                  `\n                )}\n              </ha-select>\n            `\n          : \"\"}\n        ${this._deviceClass &&\n        stateObj?.attributes.unit_of_measurement &&\n        OVERRIDE_SENSOR_UNITS[this._deviceClass]?.includes(\n          stateObj?.attributes.unit_of_measurement\n        )\n          ? html`\n              <ha-select\n                .label=${this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.unit_of_measurement\"\n                )}\n                .value=${stateObj.attributes.unit_of_measurement}\n                naturalMenuWidth\n                fixedMenuPosition\n                @selected=${this._unitChanged}\n                @closed=${stopPropagation}\n              >\n                ${OVERRIDE_SENSOR_UNITS[this._deviceClass].map(\n                  (unit: string) => html`\n                    <mwc-list-item .value=${unit}>${unit}</mwc-list-item>\n                  `\n                )}\n              </ha-select>\n            `\n          : \"\"}\n        ${domain === \"switch\"\n          ? html`<ha-select\n              .label=${this.hass.localize(\n                \"ui.dialogs.entity_registry.editor.device_class\"\n              )}\n              naturalMenuWidth\n              fixedMenuPosition\n              @selected=${this._switchAsChanged}\n              @closed=${stopPropagation}\n            >\n              <mwc-list-item\n                value=\"switch\"\n                .selected=${!this._deviceClass ||\n                this._deviceClass === \"switch\"}\n              >\n                ${this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.device_classes.switch.switch\"\n                )}\n              </mwc-list-item>\n              <mwc-list-item\n                value=\"outlet\"\n                .selected=${this._deviceClass === \"outlet\"}\n              >\n                ${this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.device_classes.switch.outlet\"\n                )}\n              </mwc-list-item>\n              <li divider role=\"separator\"></li>\n              ${this._switchAsDomainsSorted(\n                SWITCH_AS_DOMAINS,\n                this.hass.localize\n              ).map(\n                (entry) => html`\n                  <mwc-list-item .value=${entry.domain}>\n                    ${entry.label}\n                  </mwc-list-item>\n                `\n              )}\n            </ha-select>`\n          : \"\"}\n        ${this._helperConfigEntry\n          ? html`\n              <div class=\"row\">\n                <mwc-button\n                  @click=${this._showOptionsFlow}\n                  .disabled=${this._submitting}\n                >\n                  ${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.configure_state\",\n                    \"integration\",\n                    domainToName(\n                      this.hass.localize,\n                      this._helperConfigEntry.domain\n                    )\n                  )}\n                </mwc-button>\n              </div>\n            `\n          : \"\"}\n        <ha-textfield\n          error-message=\"Domain needs to stay the same\"\n          .value=${this._entityId}\n          .label=${this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.entity_id\"\n          )}\n          .invalid=${invalidDomainUpdate}\n          .disabled=${this._submitting}\n          @input=${this._entityIdChanged}\n        ></ha-textfield>\n        ${!this.entry.device_id\n          ? html`<ha-area-picker\n              .hass=${this.hass}\n              .value=${this._areaId}\n              @value-changed=${this._areaPicked}\n            ></ha-area-picker>`\n          : \"\"}\n        ${this._cameraPrefs\n          ? html`\n              <ha-settings-row>\n                <span slot=\"heading\"\n                  >${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.preload_stream\"\n                  )}</span\n                >\n                <span slot=\"description\"\n                  >${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.preload_stream_description\"\n                  )}</span\n                >\n                <ha-switch\n                  .checked=${this._cameraPrefs.preload_stream}\n                  @change=${this._handleCameraPrefsChanged}\n                >\n                </ha-switch>\n              </ha-settings-row>\n            `\n          : \"\"}\n        <ha-expansion-panel\n          .header=${this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.advanced\"\n          )}\n          outlined\n        >\n          <div class=\"label\">\n            ${this.hass.localize(\n              \"ui.dialogs.entity_registry.editor.entity_status\"\n            )}:\n          </div>\n          <div class=\"secondary\">\n            ${this._disabledBy &&\n            this._disabledBy !== \"user\" &&\n            this._disabledBy !== \"integration\"\n              ? this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.enabled_cause\",\n                  \"cause\",\n                  this.hass.localize(\n                    `config_entry.disabled_by.${this._disabledBy}`\n                  )\n                )\n              : \"\"}\n          </div>\n          <div class=\"row\">\n            <mwc-formfield\n              .label=${this.hass.localize(\n                \"ui.dialogs.entity_registry.editor.enabled_label\"\n              )}\n            >\n              <ha-radio\n                name=\"hiddendisabled\"\n                value=\"enabled\"\n                .checked=${!this._hiddenBy && !this._disabledBy}\n                .disabled=${(this._hiddenBy && this._hiddenBy !== \"user\") ||\n                this._device?.disabled_by ||\n                (this._disabledBy &&\n                  this._disabledBy !== \"user\" &&\n                  this._disabledBy !== \"integration\")}\n                @change=${this._viewStatusChanged}\n              ></ha-radio>\n            </mwc-formfield>\n            <mwc-formfield\n              .label=${this.hass.localize(\n                \"ui.dialogs.entity_registry.editor.hidden_label\"\n              )}\n            >\n              <ha-radio\n                name=\"hiddendisabled\"\n                value=\"hidden\"\n                .checked=${this._hiddenBy !== null}\n                .disabled=${(this._hiddenBy && this._hiddenBy !== \"user\") ||\n                Boolean(this._device?.disabled_by) ||\n                (this._disabledBy &&\n                  this._disabledBy !== \"user\" &&\n                  this._disabledBy !== \"integration\")}\n                @change=${this._viewStatusChanged}\n              ></ha-radio>\n            </mwc-formfield>\n            <mwc-formfield\n              .label=${this.hass.localize(\n                \"ui.dialogs.entity_registry.editor.disabled_label\"\n              )}\n            >\n              <ha-radio\n                name=\"hiddendisabled\"\n                value=\"disabled\"\n                .checked=${this._disabledBy !== null}\n                .disabled=${(this._hiddenBy && this._hiddenBy !== \"user\") ||\n                Boolean(this._device?.disabled_by) ||\n                (this._disabledBy &&\n                  this._disabledBy !== \"user\" &&\n                  this._disabledBy !== \"integration\")}\n                @change=${this._viewStatusChanged}\n              ></ha-radio>\n            </mwc-formfield>\n          </div>\n\n          ${this._disabledBy !== null\n            ? html`\n                <div class=\"secondary\">\n                  ${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.enabled_description\"\n                  )}\n                </div>\n              `\n            : this._hiddenBy !== null\n            ? html`\n                <div class=\"secondary\">\n                  ${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.hidden_description\"\n                  )}\n                </div>\n              `\n            : \"\"}\n          ${this.entry.device_id\n            ? html`\n                <div class=\"label\">\n                  ${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.change_area\"\n                  )}:\n                </div>\n                <ha-area-picker\n                  .hass=${this.hass}\n                  .value=${this._areaId}\n                  .placeholder=${this._device?.area_id}\n                  .label=${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.area\"\n                  )}\n                  @value-changed=${this._areaPicked}\n                ></ha-area-picker>\n                <div class=\"secondary\">\n                  ${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.area_note\"\n                  )}\n                  ${this._device\n                    ? html`\n                        <button class=\"link\" @click=${this._openDeviceSettings}>\n                          ${this.hass.localize(\n                            \"ui.dialogs.entity_registry.editor.change_device_area\"\n                          )}\n                        </button>\n                      `\n                    : \"\"}\n                </div>\n              `\n            : \"\"}\n        </ha-expansion-panel>\n      </div>\n      <div class=\"buttons\">\n        <mwc-button\n          class=\"warning\"\n          @click=${this._confirmDeleteEntry}\n          .disabled=${this._submitting ||\n          (!this._helperConfigEntry && !stateObj?.attributes.restored)}\n        >\n          ${this.hass.localize(\"ui.dialogs.entity_registry.editor.delete\")}\n        </mwc-button>\n        <mwc-button\n          @click=${this._updateEntry}\n          .disabled=${invalidDomainUpdate || this._submitting}\n        >\n          ${this.hass.localize(\"ui.dialogs.entity_registry.editor.update\")}\n        </mwc-button>\n      </div>\n    `;\n  }\n\n  private _nameChanged(ev): void {\n    this._error = undefined;\n    this._name = ev.target.value;\n  }\n\n  private _iconChanged(ev: CustomEvent): void {\n    this._error = undefined;\n    this._icon = ev.detail.value;\n  }\n\n  private _entityIdChanged(ev): void {\n    this._error = undefined;\n    this._entityId = ev.target.value;\n  }\n\n  private _deviceClassChanged(ev): void {\n    this._error = undefined;\n    this._deviceClass = ev.target.value;\n  }\n\n  private _unitChanged(ev): void {\n    this._error = undefined;\n    this._unit_of_measurement = ev.target.value;\n  }\n\n  private _switchAsChanged(ev): void {\n    if (ev.target.value === \"\") {\n      return;\n    }\n\n    // If value is \"outlet\" that means the user kept the \"switch\" domain, but actually changed\n    // the device_class of the switch to \"outlet\".\n    const switchAs = ev.target.value === \"outlet\" ? \"switch\" : ev.target.value;\n    this._switchAs = switchAs;\n\n    if (ev.target.value === \"outlet\" || ev.target.value === \"switch\") {\n      this._deviceClass = ev.target.value;\n    }\n  }\n\n  private _areaPicked(ev: CustomEvent) {\n    this._error = undefined;\n    this._areaId = ev.detail.value;\n  }\n\n  private async _fetchCameraPrefs() {\n    this._cameraPrefs = await fetchCameraPrefs(this.hass, this.entry.entity_id);\n  }\n\n  private async _handleCameraPrefsChanged(ev) {\n    const checkbox = ev.currentTarget as HaSwitch;\n    try {\n      this._cameraPrefs = await updateCameraPrefs(\n        this.hass,\n        this.entry.entity_id,\n        {\n          preload_stream: checkbox.checked!,\n        }\n      );\n    } catch (err: any) {\n      showAlertDialog(this, { text: err.message });\n      checkbox.checked = !checkbox.checked;\n    }\n  }\n\n  private _viewStatusChanged(ev: CustomEvent): void {\n    switch ((ev.target as any).value) {\n      case \"enabled\":\n        this._disabledBy = null;\n        this._hiddenBy = null;\n        break;\n      case \"disabled\":\n        this._disabledBy = \"user\";\n        this._hiddenBy = null;\n        break;\n      case \"hidden\":\n        this._hiddenBy = \"user\";\n        this._disabledBy = null;\n        break;\n    }\n  }\n\n  private _openDeviceSettings() {\n    showDeviceRegistryDetailDialog(this, {\n      device: this._device!,\n      updateEntry: async (updates) => {\n        await updateDeviceRegistryEntry(this.hass, this._device!.id, updates);\n      },\n    });\n  }\n\n  private async _updateEntry(): Promise<void> {\n    this._submitting = true;\n\n    const parent = (this.getRootNode() as ShadowRoot).host as HTMLElement;\n\n    const params: Partial<EntityRegistryEntryUpdateParams> = {\n      name: this._name.trim() || null,\n      icon: this._icon.trim() || null,\n      area_id: this._areaId || null,\n      device_class: this._deviceClass || null,\n      new_entity_id: this._entityId.trim(),\n    };\n\n    const stateObj: HassEntity | undefined =\n      this.hass.states[this.entry.entity_id];\n    const domain = computeDomain(this.entry.entity_id);\n\n    if (\n      this.entry.disabled_by !== this._disabledBy &&\n      (this._disabledBy === null || this._disabledBy === \"user\")\n    ) {\n      params.disabled_by = this._disabledBy;\n    }\n    if (\n      this.entry.hidden_by !== this._hiddenBy &&\n      (this._hiddenBy === null || this._hiddenBy === \"user\")\n    ) {\n      params.hidden_by = this._hiddenBy;\n    }\n    if (\n      domain === \"sensor\" &&\n      stateObj?.attributes?.unit_of_measurement !== this._unit_of_measurement\n    ) {\n      params.options_domain = \"sensor\";\n      params.options = { unit_of_measurement: this._unit_of_measurement };\n    }\n    try {\n      const result = await updateEntityRegistryEntry(\n        this.hass!,\n        this._origEntityId,\n        params\n      );\n      if (result.require_restart) {\n        showAlertDialog(this, {\n          text: this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.enabled_restart_confirm\"\n          ),\n        });\n      }\n      if (result.reload_delay) {\n        showAlertDialog(this, {\n          text: this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.enabled_delay_confirm\",\n            \"delay\",\n            result.reload_delay\n          ),\n        });\n      }\n      fireEvent(this as HTMLElement, \"close-dialog\");\n    } catch (err: any) {\n      this._error = err.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n\n    if (this._switchAs !== \"switch\") {\n      if (\n        !(await showConfirmationDialog(this, {\n          text: this.hass!.localize(\n            \"ui.dialogs.entity_registry.editor.switch_as_x_confirm\",\n            \"domain\",\n            this._switchAs\n          ),\n        }))\n      ) {\n        return;\n      }\n      const configFlow = await createConfigFlow(this.hass, \"switch_as_x\");\n      const result = (await handleConfigFlowStep(\n        this.hass,\n        configFlow.flow_id,\n        {\n          entity_id: this._entityId.trim(),\n          target_domain: this._switchAs,\n        }\n      )) as DataEntryFlowStepCreateEntry;\n      if (!result.result?.entry_id) {\n        return;\n      }\n      const unsub = await this.hass.connection.subscribeEvents(() => {\n        unsub();\n        fetchEntityRegistry(this.hass.connection).then((entityRegistry) => {\n          const entity = entityRegistry.find(\n            (reg) => reg.config_entry_id === result.result!.entry_id\n          );\n          if (!entity) {\n            return;\n          }\n          showEntityEditorDialog(parent, {\n            entity_id: entity.entity_id,\n          });\n        });\n      }, \"entity_registry_updated\");\n    }\n  }\n\n  private async _confirmDeleteEntry(): Promise<void> {\n    if (\n      !(await showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.dialogs.entity_registry.editor.confirm_delete\"\n        ),\n      }))\n    ) {\n      return;\n    }\n\n    this._submitting = true;\n\n    try {\n      if (this._helperConfigEntry) {\n        await deleteConfigEntry(this.hass, this._helperConfigEntry.entry_id);\n      } else {\n        await removeEntityRegistryEntry(this.hass!, this._origEntityId);\n      }\n      fireEvent(this, \"close-dialog\");\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _showOptionsFlow() {\n    showOptionsFlowDialog(this, this._helperConfigEntry!, null);\n  }\n\n  private _switchAsDomainsSorted = memoizeOne(\n    (domains: string[], localize: LocalizeFunc) =>\n      domains\n        .map((entry) => ({\n          domain: entry,\n          label: domainToName(localize, entry),\n        }))\n        .sort((a, b) => stringCompare(a.label, b.label))\n  );\n\n  private _deviceClassesSorted = memoizeOne(\n    (domain: string, deviceClasses: string[], localize: LocalizeFunc) =>\n      deviceClasses\n        .map((entry) => ({\n          deviceClass: entry,\n          label: localize(\n            `ui.dialogs.entity_registry.editor.device_classes.${domain}.${entry}`\n          ),\n        }))\n        .sort((a, b) => stringCompare(a.label, b.label))\n  );\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n        }\n        .container {\n          padding: 20px 24px;\n        }\n        .form {\n          margin-bottom: 53px;\n        }\n        .buttons {\n          position: absolute;\n          bottom: 0;\n          width: 100%;\n          box-sizing: border-box;\n          border-top: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n          display: flex;\n          justify-content: space-between;\n          padding: 8px;\n          padding-bottom: max(env(safe-area-inset-bottom), 8px);\n          background-color: var(--mdc-theme-surface, #fff);\n        }\n        ha-select {\n          width: 100%;\n          margin: 8px 0;\n        }\n        ha-switch {\n          margin-right: 16px;\n        }\n        ha-settings-row {\n          padding: 0;\n        }\n        ha-settings-row ha-switch {\n          margin-right: 0;\n        }\n        ha-textfield {\n          display: block;\n          margin: 8px 0;\n        }\n        ha-area-picker {\n          margin: 8px 0;\n          display: block;\n        }\n        .row {\n          margin: 8px 0;\n          color: var(--primary-text-color);\n          display: flex;\n          align-items: center;\n        }\n        .label {\n          margin-top: 16px;\n        }\n        .secondary {\n          margin: 8px 0;\n          width: 340px;\n        }\n        li[divider] {\n          border-bottom-color: var(--divider-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"entity-registry-settings\": EntityRegistrySettings;\n  }\n}\n","import \"@material/mwc-tab\";\nimport \"@material/mwc-tab-bar\";\nimport { mdiClose, mdiTune } from \"@mdi/js\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { cache } from \"lit/directives/cache\";\nimport { dynamicElement } from \"../../../common/dom/dynamic-element-directive\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/ha-dialog\";\nimport \"../../../components/ha-header-bar\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-related-items\";\nimport {\n  EntityRegistryEntry,\n  ExtEntityRegistryEntry,\n  getExtendedEntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport { replaceDialog } from \"../../../dialogs/make-dialog-manager\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { PLATFORMS_WITH_SETTINGS_TAB } from \"./const\";\nimport \"./entity-registry-settings\";\nimport type { EntityRegistryDetailDialogParams } from \"./show-dialog-entity-editor\";\n\ninterface Tabs {\n  [key: string]: Tab;\n}\n\ninterface Tab {\n  component: string;\n  translationKey: string;\n}\n\n@customElement(\"dialog-entity-editor\")\nexport class DialogEntityEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: EntityRegistryDetailDialogParams;\n\n  @state() private _entry?: EntityRegistryEntry | ExtEntityRegistryEntry | null;\n\n  @state() private _curTab = \"tab-settings\";\n\n  @state() private _extraTabs: Tabs = {};\n\n  @state() private _settingsElementTag?: string;\n\n  private _curTabIndex = 0;\n\n  public showDialog(params: EntityRegistryDetailDialogParams): void {\n    this._params = params;\n    this._entry = undefined;\n    this._settingsElementTag = undefined;\n    this._extraTabs = {};\n    this._getEntityReg();\n  }\n\n  public closeDialog(): void {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params || this._entry === undefined) {\n      return html``;\n    }\n    const entityId = this._params.entity_id;\n    const entry = this._entry;\n    const stateObj: HassEntity | undefined = this.hass.states[entityId];\n\n    return html`\n      <ha-dialog\n        open\n        .heading=${stateObj\n          ? computeStateName(stateObj)\n          : entry?.name || entityId}\n        hideActions\n        @closed=${this.closeDialog}\n        @close-dialog=${this.closeDialog}\n      >\n        <div slot=\"heading\">\n          <ha-header-bar>\n            <ha-icon-button\n              slot=\"navigationIcon\"\n              .label=${this.hass.localize(\"ui.dialogs.entity_registry.dismiss\")}\n              .path=${mdiClose}\n              dialogAction=\"cancel\"\n            ></ha-icon-button>\n            <span slot=\"title\">\n              ${stateObj ? computeStateName(stateObj) : entry?.name || entityId}\n            </span>\n            ${stateObj\n              ? html`\n                  <ha-icon-button\n                    slot=\"actionItems\"\n                    .label=${this.hass.localize(\n                      \"ui.dialogs.entity_registry.control\"\n                    )}\n                    .path=${mdiTune}\n                    @click=${this._openMoreInfo}\n                  ></ha-icon-button>\n                `\n              : \"\"}\n          </ha-header-bar>\n          <mwc-tab-bar\n            .activeIndex=${this._curTabIndex}\n            @MDCTabBar:activated=${this._handleTabActivated}\n            @MDCTab:interacted=${this._handleTabInteracted}\n          >\n            <mwc-tab\n              id=\"tab-settings\"\n              .label=${this.hass.localize(\n                \"ui.dialogs.entity_registry.settings\"\n              )}\n              dialogInitialFocus\n            >\n            </mwc-tab>\n            ${Object.entries(this._extraTabs).map(\n              ([key, tab]) => html`\n                <mwc-tab\n                  id=${key}\n                  .label=${this.hass.localize(tab.translationKey) || key}\n                >\n                </mwc-tab>\n              `\n            )}\n            <mwc-tab\n              id=\"tab-related\"\n              .label=${this.hass.localize(\"ui.dialogs.entity_registry.related\")}\n            >\n            </mwc-tab>\n          </mwc-tab-bar>\n        </div>\n        <div class=\"wrapper\">${cache(this._renderTab())}</div>\n      </ha-dialog>\n    `;\n  }\n\n  private _renderTab() {\n    switch (this._curTab) {\n      case \"tab-settings\":\n        if (this._entry) {\n          if (this._settingsElementTag) {\n            return html`\n              ${dynamicElement(this._settingsElementTag, {\n                hass: this.hass,\n                entry: this._entry,\n                entityId: this._params!.entity_id,\n              })}\n            `;\n          }\n          return html``;\n        }\n        return html`\n          <div class=\"content\">\n            ${this.hass.localize(\n              \"ui.dialogs.entity_registry.no_unique_id\",\n              \"entity_id\",\n              this._params!.entity_id,\n              \"faq_link\",\n              html`<a\n                href=${documentationUrl(this.hass, \"/faq/unique_id\")}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                >${this.hass.localize(\"ui.dialogs.entity_registry.faq\")}</a\n              >`\n            )}\n          </div>\n        `;\n      case \"tab-related\":\n        return html`\n          <ha-related-items\n            class=\"content\"\n            .hass=${this.hass}\n            .itemId=${this._params!.entity_id}\n            itemType=\"entity\"\n          ></ha-related-items>\n        `;\n      default:\n        return html``;\n    }\n  }\n\n  private async _getEntityReg() {\n    try {\n      this._entry = await getExtendedEntityRegistryEntry(\n        this.hass,\n        this._params!.entity_id\n      );\n      this._loadPlatformSettingTabs();\n    } catch {\n      this._entry = null;\n    }\n  }\n\n  private _handleTabActivated(ev: CustomEvent): void {\n    this._curTabIndex = ev.detail.index;\n  }\n\n  private _handleTabInteracted(ev: CustomEvent): void {\n    this._curTab = ev.detail.tabId;\n  }\n\n  private async _loadPlatformSettingTabs(): Promise<void> {\n    if (!this._entry) {\n      return;\n    }\n    if (\n      !Object.keys(PLATFORMS_WITH_SETTINGS_TAB).includes(this._entry.platform)\n    ) {\n      this._settingsElementTag = \"entity-registry-settings\";\n      return;\n    }\n    const tag = PLATFORMS_WITH_SETTINGS_TAB[this._entry.platform];\n    await import(`./editor-tabs/settings/${tag}`);\n    this._settingsElementTag = tag;\n  }\n\n  private _openMoreInfo(): void {\n    replaceDialog(this);\n    fireEvent(this, \"hass-more-info\", {\n      entityId: this._params!.entity_id,\n    });\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n        }\n\n        mwc-tab-bar {\n          border-bottom: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n        }\n\n        ha-dialog {\n          --dialog-content-position: static;\n          --dialog-content-padding: 0;\n          --dialog-z-index: 6;\n        }\n\n        @media all and (min-width: 451px) and (min-height: 501px) {\n          .wrapper {\n            min-width: 400px;\n          }\n        }\n\n        .content {\n          display: block;\n          padding: 20px 24px;\n        }\n\n        /* overrule the ha-style-dialog max-height on small screens */\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          ha-header-bar {\n            --mdc-theme-primary: var(--app-header-background-color);\n            --mdc-theme-on-primary: var(--app-header-text-color, white);\n          }\n        }\n\n        mwc-button.warning {\n          --mdc-theme-primary: var(--error-color);\n        }\n\n        :host([rtl]) app-toolbar {\n          direction: rtl;\n          text-align: right;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-entity-editor\": DialogEntityEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}